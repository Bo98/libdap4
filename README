
$Id$

NOTES for version 3.7.0

This version includes new features and an implementation change.

This version of libdap now returns the DAP protocol version number, 3.1, in
an HTTP response header. Use this to determine which protocol version the
library implements. The inclusion of a protocol version number is the sole
official new feature of DAP 3.1. Use Connect::get_protocol() to get the
version number. Clients can use this to determine the features supported by a
server. The Connect::get_version() method can still be used to get our
server's implementation version. The distinction is that as more groups
provide their own implementations of the DAP, the protocol version will
provide a way for clients to determine capabilities independently of
implementation.

The libdap library now contains an implementation of the DDX object/response,
although this is an alpha implementation and it's actually been part of the
library for some time now. The implementation contained in this version of
the library is close enough to the version we intend for DAP4 that developers
can start to use it. Most of the server handlers will return DDXs when asked.

The DDX combines the information previously held by the DDS and DAS objects,
making it much easier to associate attributes to variables. As the name
suggests, the DDX uses XML rather than curly-braces. You can drop the DDX
into your favorite XML parser and get a DOM tree; no need to use our parsers.
However, libdap contains a nice SAX parser that will build the libdap objects
directly from the XML DDX object/response. Also included in libdap are
methods to build a DDX using a DDS and DAS, so there's an easy migration path
for both servers and clients.

Finally, the library contains two structural changes. First, the library
named 'libdap' now holds the DAP implementation while two new libraries,
'libdapclient' and 'libdapserver', now hold the client and server helper
classes which are not strictly part of the DAP. Secondly, the DDS/DDX object
now takes the constraint evaluator as a parameter. The class
ConstraintEvaluator holds our default evaluator, but it's now possible to use
your own evaluator .

NOTES for version 3.6.1

Version 3.6.1 is bug fix release.

NOTES for version 3.6.0

This version of the library may not work older source code. Many of the 
depracated methods have been removed. 

Added are headers which send information about the version of the DAP protocol
that the library implements (in contrast to the implementation of the libray
itself). A new header named XOPeNDAP-Server is used to send information about
the implementation of servers.

The libtool interface version has been incremented from 3 to 4 (these versions
do no track the software's release version since several releases might 
present compatible binary interfaces). 

NOTES for version 3.5.3

This version of libdap++ cannot be used to build the 3.4.x and previous
clients and/or servers. However, client and servers built using this code
_will_ work with the older clients and servers.

WHAT'S IN THIS DIRECTORY?

  This directory contains the OPeNDAP C++ implementation of the Data Access
  Protocol version 2 (DAP2) with some extensions that will be part of DAP3.
  Documentation for this software can be found on the OPeNDAP home page at
  http://www.opendap.org/. The NASA/ESE RFC which describes DAP2, implemented
  by the library, can be found at http://spg.gsfc.nasa.gov/rfc/004/.

  The DAP2 is used to provide a uniform way of accessing a variety of
  different types of data across the Internet. It was originally part of the
  DODS and then NVODS projects. The focus of those projects was access to
  Earth-Science data, so much of the software developed using the DAP2 to
  date has centered on that discipline. However, the DAP2 data model is very
  general (and similar to a modern structured programming language) so it can
  be applied to a wide variety of fields.

  The DAP2 is implemented as a set of C++ classes that can be used to build
  data servers and clients. The classes may be specialized to mimic the
  behavior of other data access APIs, such as netCDF. In this way, programs
  originally meant to work with local data in those formats can be re-linked
  and equipped to work with data stored remotely in many different formats.
  The classes can also by specialized to build standalone client programs.

  The DAP2 is contained in a single library: libdap++.a. Also included in the
  library are classes and utility functions which simplify building clients
  and servers.

WHAT ELSE IS THERE?

  The file README.dodsrc describes the client-side behavior which can be
  controlled using the .dodsrc file. This includes client-side caching, proxy
  servers, et c., and is described in a separate file so it's easy to include
  in your clients.

  The file README.AIS describes the prototype Ancillary Information Service
  (AIS) included in this version of the library. The AIS is (currently) a
  client-side capability which provides a way to augment DAP attributes. This
  is a very useful feature because it can be used to add missing metadata to
  a data source. The AIS is accessed by using the AISConnect class in place
  of Connect in your client.

  This directory also contains test programs for the DAP2, a sample
  specialization of the classes, getdap (a useful command-line web client
  created with DAP2) and dap-config (a utility script to simplify linking
  with libdap.a). Also included as of version 3.5.2 is libdap.m4, an autoconf
  macro which developers can use along with autoconf to test for libdap. This
  macro will be installed in ${prefix}/share/aclocal and can be by any
  package which uses autoconf for its builds. See the file for more
  information.

  We also have Java and C versions of the DAP2 library which interoperate
  with software which uses this library. In other words, client programs
  built with the Java DAP2 implementation can communicate with servers built
  with this (C++) implementation of the DAP2. The C DAP2 library, called the
  Ocapi, only implements the client-side part of the protocol. Clients written
  using the Ocapi are interoperable with both the Java and C++ DAP2
  libraries. Note that the Ocapi is in early beta and available only from CVS
  at this time (5 May 2005).

INSTALLATION INSTRUCTIONS

  See the file INSTALL in this directory for information on building the
  library and the geturl client.

COPYRIGHT INFORMATION

  The OPeNDAP DAP library is copyrighted using the GNU Lesser GPL. See the
  file COPYING or contact the Free Software Foundation, Inc., at 59 Temple
  Place, Suite 330, Boston, MA 02111-1307 USA. Older versions of the DAP were
  copyrighted by the University of Rhode Island and Massachusetts Institute
  of Technology; see the file COPYRIGHT_URI. The file deflate.c is also 
  covered by COPYRIGHT_W3C.
