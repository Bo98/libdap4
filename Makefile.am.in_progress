
# Build libdap++, libtest-types++.a, getdap and deflate

AUTOMAKE_OPTIONS = foreign check-news

# Arrange to build with the backward compatibility mode enabled.
AM_CPPFLAGS = -DDEFAULT_BASETYPE_FACTORY
AM_CXXFLAGS = -I$(srcdir)/GNU
AM_YFLAGS = -d -v
AM_LFLAGS = -8

# These are not used by automak but are often useful for certain types of
# debugging. 
CXXFLAGS_DEBUG = -g3 -O0 -Wall -fno-defer-pop
TEST_COV_FLAGS = -ftest-coverage -fprofile-arcs

# SUBDIRS = . tests

lib_LIBRARIES = libdap.a 

#libtest-types++.a

#bin_PROGRAMS = getdap

#sbin_PROGRAMS = deflate

GNU_SRC = GNU/GetOpt.cc GNU/Regex.cc GNU/error.cc			\
	IteratorAdapter.cc ArrayIterAdapter.cc AttrIterAdapter.cc	\
	BTIterAdapter.cc ClauseIterAdapter.cc

# @DODS_REGEX_SRCS@

GNU_HDR = GNU/builtin.h GNU/Pix.h GNU/GetOpt.h GNU/Regex.h	\
	IteratorAdapter.h ArrayIterAdapter.h AttrIterAdapter.h	\
	BTIterAdapter.h ClauseIterAdapter.h

# Roughly divide the source into DAP, Client and Server groups. In the
# future, make three different libraries. jhrg 

# GRAM_SRC = das.yy dds.yy expr.yy gse.yy error_parser.yy das_scanner.ll \
#	dds_scanner.ll expr_scanner.ll gse_escanner.ll error_scanner.ll 


GRAM_SRC = lex.das.c das.tab.c lex.dds.c dds.tab.c lex.expr.c expr.tab.c \
	lex.Error.c Error.tab.c lex.gse_.cc gse.tab.cc 

DAP_SRC = $(GRAM_SRC) AttrTable.cc DAS.cc parser-util.cc escaping.cc	\
	DDS.cc DataDDS.cc DDXParser.cc Clause.cc RValue.cc Error.cc	\
	InternalErr.cc BaseType.cc Byte.cc Int32.cc Float64.cc		\
	Str.cc Url.cc Vector.cc Array.cc Structure.cc Sequence.cc	\
	Grid.cc UInt32.cc util.cc xdrutil_ppc.c ce_functions.cc		\
	GSEClause.cc Int16.cc UInt16.cc Float32.cc Constructor.cc	\
	PassiveByte.cc PassiveInt32.cc PassiveFloat64.cc PassiveStr.cc	\
	PassiveUrl.cc PassiveUInt32.cc PassiveInt16.cc PassiveUInt16.cc	\
	PassiveFloat32.cc PassiveArray.cc PassiveStructure.cc		\
	util_mit.cc BaseTypeFactory.cc RValue.cc

CLIENT_SRC = RCReader.cc Connect.cc HTTPConnect.cc HTTPCache.cc		\
	AISResources.cc AISDatabaseParser.cc AISMerge.cc AISConnect.cc

SERVER_SRC = SignalHandler.cc OPeNDAPFile.cc OPeNDAPDir.cc cgi_util.cc	\
	DODSFilter.cc ResponseTooBigErr.cc  

DAP_HDR = escaping.h AttrTable.h DAS.h parser.h debug.h \
	dods-limits.h ce_functions.h Operators.h EventHandler.h \
	trace_new.h DDS.h DataDDS.h \
	DDXParser.h DDXExceptions.h expr.h Clause.h RValue.h Error.h	      \
	InternalErr.h BaseType.h Byte.h Int32.h GSEClause.h	      \
	Constructor.h Float64.h Str.h Url.h Vector.h Array.h Structure.h      \
	Sequence.h Grid.h UInt32.h util.h Int16.h UInt16.h Float32.h	      \
	dods-datatypes.h util_mit.h PassiveByte.h PassiveInt32.h	      \
	PassiveFloat64.h PassiveStr.h PassiveUrl.h PassiveUInt32.h	      \
	PassiveInt16.h PassiveUInt16.h PassiveFloat32.h PassiveArray.h	      \
	PassiveStructure.h DODSResponseObject.h BaseTypeFactory.h

CLIENT_HDR = ResponseTooBigErr.h RCReader.h Connect.h HTTPConnect.h	    \
	ObjectType.h EncodingType.h HTTPCache.h HTTPCacheDisconnectedMode.h \
	Response.h HTTPResponse.h HTTPCacheResponse.h AISConnect.h	    \
	AISMerge.h AISExceptions.h AISDatabaseParser.h AISResources.h	    \
	Resource.h HTTPCacheInterruptHandler.h

SERVER_HDR = cgi_util.h DODSFilter.h SignalHandler.h OPeNDAPFile.h	\
	OPeNDAPDir.h SignalHandlerRegisteredErr.h AlarmHandler.h

libdap_a_SOURCES = $(DAP_SRC) $(CLIENT_SRC) $(SERVER_SRC) $(GNU_SRC)

pkginclude_HEADERS = $(DAP_HDR) $(CLIENT_HDR) $(SERVER_HDR) $(GNU_HDR)

DIST_EXTRA = ChangeLog COPYING win32 README.AIS \
	README.dodsrc COPYRIGHT_URI

TESTSRCS = TestByte.cc TestInt32.cc TestFloat64.cc TestStr.cc TestUrl.cc \
	   TestArray.cc TestStructure.cc TestSequence.cc \
	   TestGrid.cc TestUInt32.cc TestInt16.cc TestUInt16.cc \
	   TestFloat32.cc TestCommon.cc TestTypeFactory.cc

TEST_HDR = TestArray.h TestByte.h TestCommon.h TestFloat32.h TestFloat64.h \
	TestGrid.h TestInt16.h TestInt32.h TestSequence.h TestStr.h \
	TestStructure.h TestTypeFactory.h TestUInt16.h TestUInt32.h TestUrl.h


TESTPROGSRCS = das-test.cc dds-test.cc expr-test.cc error-test.cc getdap.cc \
	   ThreadTest.cc server_handler.cc

OTHER_SRCS =  AISDatabaseParserTest.cc AISMergeTest.cc AISResourcesTest.cc \
       ArrayTest.cc AttrTableTest.cc BaseTypeTest.cc ByteTest.cc \
       cgiUtilTest.cc DASTest.cc DataDDSTest.cc \
       DDSTest.cc DDXParserTest.cc deflate.c DODSFilterTest.cc \
       generalUtilTest.cc gse-test.cc HTTPCacheTest.cc HTTPConnectTest.cc \
       LongIterAdapter.cc parserUtilTest.cc RCReaderTest.cc SequenceTest.cc \
       SignalHandlerTest.cc usage.cc

LEX_YACC_EXTRA = das.lex das.y dds.lex dds.y expr.lex expr.y gse.lex gse.y \
	Error.lex Error.y

EXTRA_DIST = $(DIST_EXTRA) $(TESTSRCS) $(TESTPROGSRCS) \
   $(LEX_YACC_EXTRA) $(TEST_HDR) $(OTHER_SRCS) regex-0.12 cache-testsuite \
   cgi-util-tests tests ais_testsuite das-testsuite dds-testsuite \
   expr-testsuite grid-func-testsuite rcreader-testsuite server-testsuite \
   GNU/README depend.sh common_tests.exp \
   dods.rc doxy.conf doxy_private.conf libdap.spec cvsdate

############################################################################
#
# Special rules for the grammars. I tried to use the automake grammar 
# support but these grammars are so hacked that it was taking too much time.
# Maybe if each grammar was converted one by one... jhrg 6/22/05
# 

# Build the DAS scanner (a C source module compiled with C++)

lex.das.c: das.lex das.tab.c das.tab.h
	$(LEX) $(LFLAGS) $(AM_LFLAGS) -Pdas $<

DODS_LEX_INCLUDES = -I.  -I$(srcdir) -I$(srcdir)/GNU

lex.das.o: lex.das.c
	$(CXX) $(DODS_LEX_INCLUDES) $(CXXFLAGS) $(CPPFLAGS) -Wno-unused -c $< -o lex.das.o

# Build the DAS parser
# Note that awk is used to add a param to dasparse().

das.tab.c das.tab.h: das.y DAS.h
	$(YACC) $(YFLAGS) $(AM_YFLAGS) -p das $<

# build using C++ compiler
das.tab.o: das.tab.c das.y DAS.h 
	$(CXX) $(DODS_LEX_INCLUDES) $(CXXFLAGS) $(CPPFLAGS)  -c $< -o das.tab.o

# Build the DDS Scanner.

lex.dds.c: dds.lex dds.tab.c dds.tab.h
	$(LEX) $(LFLAGS) $(AM_LFLAGS) -Pdds $<

lex.dds.o: lex.dds.c
	$(CXX) $(DODS_LEX_INCLUDES) $(CXXFLAGS) $(CPPFLAGS)  -Wno-unused -c $< -o lex.dds.o

# Build the DDS parser

dds.tab.c dds.tab.h: dds.y
	$(YACC) $(YFLAGS) $(AM_YFLAGS) -p dds $<

# build using C++ compiler
dds.tab.o: dds.tab.c dds.y      
	$(CXX) $(DODS_LEX_INCLUDES) $(CXXFLAGS) $(CPPFLAGS) -c $< -o dds.tab.o

# Build the CE Scanner.

lex.expr.c: expr.lex expr.tab.c expr.tab.h
	$(LEX) $(LFLAGS) $(AM_LFLAGS) -Pexpr $<

lex.expr.o: lex.expr.c
	$(CXX) $(DODS_LEX_INCLUDES) $(CXXFLAGS) $(CPPFLAGS)  -Wno-unused -c $< -o lex.expr.o

# Build the CE parser

expr.tab.c expr.tab.h: expr.y
	$(YACC) $(YFLAGS) $(AM_YFLAGS) -p expr $<

expr.tab.o: expr.tab.c expr.y		# build using C++ compiler
	$(CXX) $(DODS_LEX_INCLUDES) $(CXXFLAGS) $(CPPFLAGS)  -c $< -o expr.tab.o

# Build the grid selection sub_expression scanner and parser

lex.gse_.cc: gse.lex gse.tab.cc gse.tab.h
	$(LEX) $(LFLAGS) $(AM_LFLAGS) -Pgse_ $<
	mv lex.gse_.c lex.gse_.cc

# lex.gse.o: lex.gse_.c
#	$(CXX) -I. -IGNU $(CXXFLAGS) $(CPPFLAGS)  -Wno-unused -c lex.gse_.c -o lex.gse.o

gse.tab.cc gse.tab.h: gse.y
	$(YACC) $(YFLAGS) $(AM_YFLAGS) -p gse_ $<
	mv gse.tab.c gse.tab.cc

#gse.tab.o: gse.tab.c gse.y 		# build using C++ compiler
#	$(CXX) -I. -IGNU $(CXXFLAGS) $(CPPFLAGS)  -c gse.tab.c -o gse.tab.o

# Build the Error object scanner.

lex.Error.c: Error.lex Error.tab.c Error.tab.h
	$(LEX) $(LFLAGS) $(AM_LFLAGS) -PError $<

lex.Error.o: lex.Error.c
	$(CXX) $(DODS_LEX_INCLUDES) $(CXXFLAGS) $(CPPFLAGS)  -Wno-unused -c $< -o lex.Error.o

# Build the Error object parser.

Error.tab.c Error.tab.h: Error.y
	$(YACC) $(YFLAGS) $(AM_YFLAGS) -p Error $<

# build using C++ compiler
Error.tab.o: Error.tab.c Error.y	
	$(CXX) $(DODS_LEX_INCLUDES) $(CXXFLAGS) $(CPPFLAGS) -c $< -o Error.tab.o

