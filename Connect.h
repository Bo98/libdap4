
// -*- C++ -*-

// (c) COPYRIGHT URI/MIT 1994-1996
// Please first read the full copyright statement in the file COPYRIGH.  
//
// Authors:
//	jhrg,jimg	James Gallagher (jgallagher@gso.uri.edu)
//	dan		Dan Holloway (dan@hollywood.gso.uri.edu)
//	reza		Reza Nekovei (reza@intcomm.net)

// Connect objects are used as containers for information pertaining to a
// connection that a user program makes to a dataset. The dataset may be
// either local (i.e., a file on the user's own computer) or a remote
// dataset. In the later case a DODS URL will be used to reference the
// dataset. 
//
// Connect contains methods which can be used to read the DOS DAS and DDS
// objects from the remote dataset as well as reading reading data. The class
// understands in a rudimentary way how DODS constraint expressions are
// formed and how to manage the CEs generated by a API to request specific
// variables with the URL initially presented to the class when the object
// was instantiated.
//
// Connect also provides additional services such as automatic decompression
// of compressed data, transmission progress reports and error processing.
//
// Connect will almost certainly need to be specialized for each
// client-library. Connect in not intended for use on the server-side of DODS.
//
// jhrg 9/29/94

/* $Log: Connect.h,v $
/* Revision 1.22  1997/02/10 02:31:27  jimg
/* Changed the return type of request_data() and related functions from DDS & to
/* DDS *.
/*
 * Revision 1.21  1996/11/25 03:39:25  jimg
 * Added web-error to set of object types.
 * Added two MIME parsers to set of friend functions.
 * Removed unused friend functions.
 *
 * Revision 1.20  1996/11/13 18:57:15  jimg
 * Now uses version 5.0a of the WWW library.
 *
 * Revision 1.19  1996/10/08 17:02:10  jimg
 * Added fields for the projection and selection parts of a CE supplied with
 * the URL passed to the Connect ctor.
 *
 * Revision 1.18  1996/07/10 21:25:34  jimg
 * *** empty log message ***
 *
 * Revision 1.17  1996/06/21 23:14:15  jimg
 * Removed GUI code to a new class - Gui.
 *
 * Revision 1.16  1996/06/18 23:41:01  jimg
 * Added support for a GUI. The GUI is actually contained in a separate program
 * that is run in a subprocess. The core `talks' to the GUI using a pty and a
 * simple command language.
 *
 * Revision 1.15  1996/06/08 00:07:57  jimg
 * Added support for compression. The Content-Encoding header is used to
 * determine if the incoming document is compressed (values: x-plain; no
 * compression, x-gzip; gzip compression). The gzip program is used to
 * decompress the document. The new software uses UNIX IPC and a separate
 * subprocess to perform the decompression.
 *
 * Revision 1.14  1996/06/04 21:33:17  jimg
 * Multiple connections are now possible. It is now possible to open several
 * URLs at the same time and read from them in a round-robin fashion. To do
 * this I added data source and sink parameters to the serialize and
 * deserialize mfuncs. Connect was also modified so that it manages the data
 * source `object' (which is just an XDR pointer).
 *
 * Revision 1.13  1996/05/29 21:51:51  jimg
 * Added the enum ObjectType. This is used when a Content-Description header is
 * found by the WWW library to record the type of the object without first
 * parsing it.
 * Added ctors for the struct constraint.
 * Removed the member _request.
 *
 * Revision 1.12  1996/05/21 23:46:33  jimg
 * Added support for URLs directly to the class. This uses version 4.0D of
 * the WWW library from W3C.
 *
 * Revision 1.11  1996/04/05 01:25:40  jimg
 * Merged changes from version 1.1.1.
 *
 * Revision 1.10  1996/02/01 21:45:33  jimg
 * Added list of DDSs and constraint expressions that produced them.
 * Added mfuncs to manage DDS/CE list.
 *
 * Revision 1.9.2.1  1996/02/23 21:38:37  jimg
 * Updated for new configure.in.
 *
 * Revision 1.9  1995/06/27  19:33:49  jimg
 * The mfuncs request_{das,dds,dods} accept a parameter which is appended to
 * the URL and used by the data server CGI to select which filter program is
 * run to handle a particular request. I changed the parameter name from cgi
 * to ext to better represent what was going on (after getting confused
 * several times myself).
 *
 * Revision 1.8  1995/05/30  18:42:47  jimg
 * Modified the request_data member function so that it accepts the variable
 * in addition to the existing arguments.
 *
 * Revision 1.7  1995/05/22  20:43:12  jimg
 * Removed a paramter from the REQUEST_DATA member function: POST is not
 * needed since we no longer use the post mechanism.
 *
 * Revision 1.6  1995/04/17  03:20:52  jimg
 * Removed the `api' field.
 *
 * Revision 1.5  1995/03/09  20:36:09  jimg
 * Modified so that URLs built by this library no longer supply the
 * base name of the CGI. Instead the base name is stripped off the front
 * of the pathname component of the URL supplied by the user. This class
 * append the suffix _das, _dds or _serv when a Connect object is used to
 * get the DAS, DDS or Data (resp).
 *
 * Revision 1.4  1995/02/10  21:54:52  jimg
 * Modified definition of request_data() so that it takes an additional
 * parameter specifying sync or async behavior.
 *
 * Revision 1.3  1995/02/10  04:43:17  reza
 * Fixed the request_data to pass arguments. The arguments string is added to
 * the file name before being posted by NetConnect. Default arg. is null.
 *
 * Revision 1.2  1995/01/31  20:46:56  jimg
 * Added declaration of request_data() mfunc in Connect.
 *
 * Revision 1.1  1995/01/10  16:23:04  jimg
 * Created new `common code' library for the net I/O stuff.
 *
 * Revision 1.2  1994/10/05  20:23:28  jimg
 * Fixed errors in *.h files comments - CVS bites again.
 * Changed request_{das,dds} so that they use the field `_api_name'
 * instead of requiring callers to pass the api name.
 *
 * Revision 1.1  1994/10/05  18:02:08  jimg
 * First version of the connection management classes.
 * This commit also includes early versions of the test code.  
 */

#ifndef _connect_h
#define _connect_h

#ifdef __GNUG__
#pragma "interface"
#endif

#include <stdio.h>
#include <sys/time.h>
#include <rpc/types.h>
#include <netinet/in.h>
#include <rpc/xdr.h>

#include <String.h>
#include <SLList.h>

#include <WWWLib.h>			      /* Global Library Include file */
#include <WWWApp.h>
#include <WWWMIME.h>				    /* MIME parser/generator */
#include <WWWHTML.h>				    /* HTML parser/generator */
#include <WWWNews.h>				       /* News access module */
#include <WWWHTTP.h>				       /* HTTP access module */
#include <WWWFTP.h>
#include <WWWFile.h>
#include <WWWGophe.h>
#include <WWWStream.h>
#include <WWWTrans.h>
#include <WWWInit.h>

#include "DAS.h"
#include "DDS.h"
#include "Error.h"
#include "Gui.h"
#include "util.h"
#include "config_dap.h"

/// What type of object is in the stream coming from the data server?
//* When a version 2.x or greater DODS data server sends an object, it uses
//* the Content-Description header of the response to indicate the type of
//* object contained in the response. During the parse of the header a member
//* of Connect is set to one of these values so that other mfuncs can tell the
//* type of object without parsing the stream themselves. 

enum ObjectType {
    unknown_type,
    dods_das,
    dods_dds,
    dods_data,
    dods_error,
    web_error
};

/// What type of encoding has been used on the current stream?
//* DODS understands two types of encoding: x-plain and x-gzip, which
//* coorespond to plain uncompressed data and data compressed with GNU's gzip
//* resptively. 

enum EncodingType {
    unknown_enc,
    x_plain,
    x_gzip
};

class Connect {
private:
    struct constraint {
	String _expression;
	DDS _dds;

	constraint(String expr, DDS dds): _expression(expr), _dds(dds) {}
	constraint(): _expression(""), _dds() {}
    };

    bool _local;		// Is this a local connection

    // The following members are vaild only if _LOCAL is false.

    static int _connects;	// Are there any remote connect objects?
    static String _logfile;	// If !"", log remote access to the named file
    static HTList *_conv;	// List of global converters
    
    ObjectType _type;		// What type of object is in the stream?
    EncodingType _encoding;	// What type of encoding is used?

    DAS _das;			// Dataset attribute structure
    DDS _dds;			// Dataset descriptor structure
    Error _error;		// Error object

    Gui *_gui;			// Used for progress, error display.

    String _URL;		// URL to remote dataset (minus CE)
    String _proj;		// Projection part of initial CE.
    String _sel;		// Selection of initial CE

    HTParentAnchor *_anchor;
    struct timeval *_tv;	// Timeout on socket
    HTMethod _method;		// What method are we envoking 
    FILE *_output;		// Destination; a temporary file
    XDR *_source;		// Data source stream

    SLList<constraint> _data;	// List of expressions & DDSs

    //* Initialize the W3C WWW Library. This should only be called when a
    //* Connect object is created and there are no other Connect objects in
    //* existance.
    void www_lib_init();

    //* Read a url. Assume that the object's _OUTPUT stream has been set
    //* properly.
    //* Returns true if the read operation succeeds, false otherwise.
    bool read_url(String &url, FILE *stream);

    //* Separate the text DDS from the binary data in the data object (which
    //* is a bastardized multipart MIME document). The returned FILE * points
    //* to a temporary file which contains the DDS object only. The formal
    //* parameter IN is advanced so that it points to the first byte of the
    //* binary data.
    FILE *move_dds(FILE *in);

    //* Copy from one Connect to another. 
    void clone(const Connect &src);

    //* Close the objects _output stream if it is not NULL or STDOUT.
    void close_output();

    friend int description_handler(HTRequest *request, HTResponse *response,
				   const char *token, const char *val);

    friend int encoding_handler(HTRequest *request, HTResponse *response,
			      const char *token, const char *val);

    friend int header_handler(HTRequest *request, HTResponse *response,
			      const char *token, const char *val);

    friend char dods_error_print (HTRequest * request, HTAlertOpcode, int, 
				  const char *, void * input, HTAlertPar *);

    Connect();			// Never call this.

public:
    Connect(String name); 
    Connect(const Connect &copy_from);
    virtual ~Connect();

    Connect &operator=(const Connect &rhs);

    /// Dereference a URL.
    //* Fetch the named URL and put its contents into the member _OUTPUT.
    //* If ASYNC is true, then the operation is asynchronous; the mfunc
    //* returns before the data transfer is complete.
    //* Returns false if an error is detected, otherwise returns true.
    bool fetch_url(String &url, bool async = false);

    /// Access the information contained in this instance.
    //* Returns a FILE * which can be used to read the data from the object.
    FILE *output();

    /// Access the XDR input stream (source) for this connection.
    //* Returns a XDR * which is tied to the current output() stream.
    XDR *source();

    /// Does this object refer to a local file?
    //* Return true is the object refers to a local file, otherwise returns
    //* false .
    bool is_local();

    /// Get the object's URL.
    //* Return the object's URL in a String. If CE is false, do not include
    //* the constraint expression part of the URL (the `?' and anything 
    //* following it). If the object refers to local data, return the null
    //* string. 
    String URL(bool CE = true);

    /// Get the Connect's constraint expression.
    //* Return the constraint expression part of the URL. Note that this CE
    //* is supplied as part of the URL passed to the Connect's constructor.
    //* It is not the CE passed into the the request_data(...) mfunc.
    //* Returns a String which contains the object's base CE.
    String CE();

    /// Return the type of the most recent object sent from the server.
    //* During the parse of the message headers, the object type is set. Use
    //* this mfunc to read that type information. This will be valid *before*
    //* the return object is completely parsed so it can be used to decide
    //* whether to call the das, etc. parser on the data remaining in the input
    //* stream. 
    ObjectType type();

    /// Return the type of encoding used on the data in the stream.
    //* Encoding types are currently limited to x-plain (no special decoding
    //* required) and x-gzip (compressed using GNU's gzip).
    EncodingType encoding();

    /// Return a reference to the Connect's DAS object.
    DAS &das();

    /// Return a reference to the Connect's DDS object.
    DDS &dds();

    /// Get a reference to the last error.
    //* Returns: The last error object sent from the server. If no error has
    //* been sent from the server, returns a reference to an empty error
    //* object. 
    Error &error();

    /// Return a pointer to the GUI object assoicated with this connection.
    Gui *gui();

    // For each data access there is an associated constraint expression
    // (even if it is null) and a resulting DDS which describes the type(s)
    // of the variables that result from evaluating the CE in the environment
    // of the dataset referred to by a particular instance of Connect.
    Pix first_constraint();
    void next_constraint(Pix &p);
    String constraint_expression(Pix p);
    DDS *constraint_dds(Pix p);

    // get the DAS, DDS and data from the server/cgi comb using a URL
    bool request_das(bool gui = false,  const String &ext = "das");
    bool request_dds(bool gui = false, const String &ext = "dds");

    DDS *request_data(String expr, bool gui = true, bool async = false, 
		      const String &ext = "dods");

    // For every new data read initiated using this connect, there is a DDS
    // and constraint expression. The data itself is stored in the dds in the
    // constraint object.
    DDS *append_constraint(String expr, DDS &dds);
};

#endif // _connect_h
