# -*- shell-script -*-
#
# Initial Travic-CI control file. 6.5.15 jhrg

language: cpp

compiler:
  - gcc
  - clang

# whitelist; assume tags for releases use the familiar dot notation
# Building a tag will trigger a deployment; see the 'deploy' section
# down below
branches:
  only:
    - master
    - coverity_scan
    - /^*-travis/
    - /^*-[0-9]+\.[0-9]+\.[0-9]+/

# This may solve the coverity issue where a push to the coverity_scan
# branch runs the scanner twice (once for each of our compilers).
# ...not sure and it's hard to test since we get only one run/day,
# but running the scan twice breaks the build because we're allowed
# only one run/day.
matrix:
  exclude:
    - compiler: clang
    - env: COVERITY_SCAN_BRANCH=1

# Use this to prepare the system to install prerequisites or
# dependencies
#
# Building on Ubuntu, we need uuid-dev, xml, curl When Travis-CI moves
# to Ubuntu 14 (from 12, as of 6/16/15) we can load bison using apt-get
before_install:
  - sudo apt-get update -qq
  - sudo apt-get install -qq -y libxml2-dev
  - sudo apt-get install -qq -y uuid-dev 
  - sudo apt-get install -qq -y libcurl4-openssl-dev
  - sudo apt-get install -qq -y libcppunit-dev
  - dpkg -l

# Use this to install any prerequisites or dependencies necessary to
# run your build
install:
  - wget http://ftp.gnu.org/gnu/bison/bison-3.0.4.tar.gz
  - tar -xzf bison-3.0.4.tar.gz
  - (cd bison-3.0.4 && ./configure && make -j 4 && sudo make install)
 
# Use this to prepare your build for testing e.g. copy database
# configurations, environment variables, etc.
#
# I set prefix and PATH even though it's not really needed.
before_script:
  - export prefix=$HOME/OPENDAP/build
  - export PATH=$prefix/bin:/usr/local/bin:$PATH
  - which bison
  - bison --version
  - autoreconf --force --install --verbose
  - ./configure --prefix=$prefix

# All commands must exit with code 0 on success. Anything else is
# considered failure. Note that each line of 'script' is run, regardless
# of exit status (in the preceding sections, execution stops on the
# first error).
#
# NB: sudo make install failed for clang here, hence the use of
# --prefix (which we'll need anyway later when we build the bes) with
# configure above. This is an idiosyncrasy of Travis CI because of the
# way it installs clang.
script:
  - if [ ${COVERITY_SCAN_BRANCH} != 1 ]; then  make -j7 && make -j7 check && make install ; fi

# Build a debian package if the above worked
# after_success:
#  - ./build-deb-pkg.sh

# after_failure:

# after_script:

# Figure out how to do this for incremental builds. This version works
# only for tagged pushes.
deploy:
  provider: releases
  skip_cleanup: true
  api_key:
    secure: r4QZiJ+Pp9VPZYeL7s7jW1XMIgnceymGUqDS083AoqylSYsZOElqv2PCOrXSLAo1l0xgGwDaDFCy0HPEVCJzM7b/rNEOkQFQ6lUCuKQy4Jy3kNDpxLZdg8qk65ZkHxlUAwnbJ0HPF8sri6gXLO/7ytz4tYnVuVsMPl3qXG25I9o=
  file: libdap_*.deb
  on:
    repo: OPENDAP/libdap4
    condition: $CC = gcc
    tags: true
    
env:
  global:
   # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created
   # via the "travis encrypt" command using the project repo's public key
   - secure: "OYEzGP6BuDHctPj90EP0y0wjfSyaJs6tN89niLhq82jJfJVGvU2UmXGWACNFakM7xpobVfdwCIYomxgIz43CpNKt4TbuGW8PVIz2EI9Ir/Ne4A3W8pVHBkP8YvzRkiu0pWNeShcsJ4ZmzWEGy9YlPF36/HWai3ZCMEtJsTY8cCo="

addons:
  coverity_scan:
    project:
      name: "OPENDAP/libdap4"
      description: "Build submitted via Travis CI"
    notification_email: jgallagher@opendap.org
    build_command: "make -j7"
    branch_pattern: coverity_scan
    
    