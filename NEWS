
$Id: NEWS,v 1.8 2005/05/05 19:21:49 jimg Exp $

Release 3.5.0

This is a beta release of libdap, version 3.5. 

New or changed things in this release:

First, the old 'DODS' CVS module is being broken up to facilitate more
frequent releases of software. libdap++ has a new CVS module named 'libdap.'
To access the software using CVS, use 'cvs co libdap' (where in the past you
used 'cvs co DODS/src/dap' or 'cvs co DODS' and then changed into the
DODS/src/dap directory.

The autoconf scripts have been updated; still no libtool or Makefile.am, but
the scripts are much more robust.

The third-party packages are not bundled with the library. In a sense they
never were, but they _were_ a part of the DODS CVS module. Now it's up to you
to get and install the required packages. Look on the web site (or Google)
for libxml2 and curl. We build using curl version 7.12.3 and libxml
version 2.6.16; curl 7.12.0 should work and older versions of libxml2 should
also work.

Along with that change is that libdap++.a now installs in
/usr/local/{lib,include,bin} instead of inside the DODS tree. The
library itself installs in /usr/local/lib as libdap++.a.3.5; libdap++.a is
symbolically linked to that file. The header files now install in
/usr/local/include/libdap-3.5; /usr/local/include/lidap is symbolically
linked to that directory. The utilities geturl and opendap-config have been
renamed getdap and libdap-config, respectively (the name geturl corresponds to
another utility and I want *-config scripts for all the libraries we have so
the name opendap-config will be ambiguous). The getdap utility is, except for
the name change, exactly the same as geturl. The libdap-config script
provides a way to determine which libraries should be included when linking
with a particular build of libdap. It also provides information about the
version of the library linked to /usr/local/lib/libdap++.a and some other
stuff. Use libdap-config --help for a listing of all the options.

Other changes to libdap++:

The library now uses a factory class to determine how to instantiate
specializations of Byte, et cetera. If you code relies on subclassing those
you'll need to switch from the 'virtual constructors' method of instantiation
to the factory class. Look at BaseTypeFactory and the example specialization
TestTypeFactory. It's very straightforward to make the change.

The library contains support for the DDX object. The DDX will become the
foundation of the DAP3 protocol and it bundles the attributes along with the
variables they describe. This will simplify many processing tasks for
clients. The software provided simplifies generating these by building them
from existing DAS and DDS objects. Note that this is the library only; none
of our servers use the code yet, at least not 'officially.'

There have also been some significant refactoring in DDS and DAS: The
DDS:send() method has been copied over to DODSFilter and the version in DDS
will be deprecated and removed. The library uses STL iterators almost
exclusively and the next version will eliminate the ancient Pix class.
