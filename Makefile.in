
# $Id: Makefile.in,v 1.168 2005/04/22 23:31:40 jimg Exp $

@SET_MAKE@

# Set makefile variables, some with values supplied by configure 
# DEFS gets the `-D' defines that describe what a particular system has
# or doesn't have.

# The library libdap++.a contains the code for the generation of the DAS and
# DDS structures plus the code for data transmission and the GNU libg++.a
# classes Map, Stack and Vec.
# getdap is a simple program that uses the dap++ library plus others to fetch
# a url. In addition it can read and process DAS and DDS objects, displaying
# the print representation on the screen.

PROG = libdap++.a libtest-types++.a getdap usage deflate

INCS = -I. -IGNU -Iregex-0.12 @INCS@
DEFS = @DEFS@ -DDEFAULT_BASETYPE_FACTORY
CPPFLAGS = @CPPFLAGS@ $(DEFS) $(INCS)
# Use these options for debugging. 12/24/02 jhrg
CXXFLAGS_DEBUG = -g3 -O0 -Wall -fno-defer-pop
CXXFLAGS = $(CXXFLAGS_DEBUG) 
# CXXFLAGS = @CXXFLAGS@ -Wall -Wno-deprecated -DNDEBUG
TEST_COV_FLAGS = -ftest-coverage -fprofile-arcs
LDFLAGS = -L. @LDFLAGS@
LFLAGS = -8
YFLAGS = -d -v
TAGS_FLAGS =
LIBS = @LIBS@

# Set the instalation directories; prefix can be set on the command line
# during Makefile construction with `./configure --prefix /my/choice'

prefix = @prefix@
exec_prefix = $(prefix)
bindir = $(exec_prefix)/bin
sbindir = $(exec_prefix)/sbin
libdir = $(exec_prefix)/lib
includedir = $(prefix)/include/libdap
etcdir = $(prefix)/etc
manext = 1
mandir = $(prefix)/man/man$(manext)

src = .

INSTALLMAN = man

SHELL = /bin/sh
srcdir = @srcdir@
host = @host@

AWK = @AWK@
TAR = @TAR@
PERL = @PERL@

# testsuite specifics
RUNTEST = runtest
RUNTESTFLAGS = #--all --verbose

# names of key programs

LN_S = @LN_S@
CP = cp
AWK = @AWK@
CC = @CC@
CXX = @CXX@
YACC = @YACC@
LEX = @LEX@
AR = ar
TAGS = etags
RANLIB = @RANLIB@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
STRIP = strip
VALGRIND = @VALGRIND@

UTILSRCS = cgi_util.cc escaping.cc DODSFilter.cc SignalHandler.cc \
	OPeNDAPFile.cc OPeNDAPDir.cc
UTILOBJS = cgi_util.o escaping.o DODSFilter.o SignalHandler.o \
	OPeNDAPFile.o OPeNDAPDir.o
UTILHDRS = cgi_util.h escaping.h DODSFilter.h SignalHandler.h \
	OPeNDAPFile.h OPeNDAPDir.h

DAS_GRAM_OBJS = lex.das.o das.tab.o parser-util.o
DDS_GRAM_OBJS = lex.dds.o dds.tab.o parser-util.o
EXPR_GRAM_OBJS = lex.expr.o expr.tab.o RValue.o
ERROR_GRAM_OBJS = lex.Error.o Error.tab.o
GSE_GRAM_OBJS = lex.gse.o gse.tab.o
GRAM_SRCS = lex.das.c das.tab.c lex.dds.c dds.tab.c lex.expr.c expr.tab.c \
	    RValue.cc lex.Error.c Error.tab.c lex.gse_.c gse.tab.c

DASHDRS = AttrTable.h DAS.h parser.h
DASSRCS = AttrTable.cc DAS.cc parser-util.cc
DASOBJS = AttrTable.o DAS.o $(DAS_GRAM_OBJS)

DDSHDRS = DDS.h DataDDS.h
DDSSRCS = DDS.cc DataDDS.cc
DDSOBJS = DDS.o DataDDS.o $(DDS_GRAM_OBJS)

DDXHDRS = DDXParser.h DDXExceptions.h
DDXSRCS = DDXParser.cc
DDXOBJS = DDXParser.o

EXPRHDRS = expr.h Clause.h RValue.h
EXPRSRCS = Clause.cc RValue.cc
EXPROBJS = Clause.o RValue.o $(EXPR_GRAM_OBJS)

ERRORHDRS = Error.h InternalErr.h ResponseTooBigErr.h \
	SignalHandlerRegisteredErr.h
ERROROBJS = Error.o InternalErr.o ResponseTooBigErr.o $(ERROR_GRAM_OBJS)
ERRORSRCS = Error.cc InternalErr.cc ResponseTooBigErr.cc

CLIENTSRCS = RCReader.cc Connect.cc HTTPConnect.cc HTTPCache.cc
CLIENTOBJS = RCReader.o Connect.o HTTPConnect.o HTTPCache.o
CLIENTHDRS = RCReader.h Connect.h HTTPConnect.h \
	     ObjectType.h EncodingType.h HTTPCache.h \
	     HTTPCacheDisconnectedMode.h Response.h HTTPResponse.h \
	     HTTPCacheResponse.h

TYPEHDRS = BaseType.h Byte.h Int32.h GSEClause.h Constructor.h \
	   Float64.h Str.h Url.h Vector.h Array.h Structure.h \
	   Sequence.h Grid.h UInt32.h util.h Int16.h UInt16.h Float32.h \
	   dods-datatypes.h util_mit.h \
	   PassiveByte.h PassiveInt32.h PassiveFloat64.h PassiveStr.h \
	   PassiveUrl.h PassiveUInt32.h PassiveInt16.h PassiveUInt16.h \
	   PassiveFloat32.h PassiveArray.h PassiveStructure.h \
	   DODSResponseObject.h BaseTypeFactory.h

TYPESRCS = BaseType.cc Byte.cc Int32.cc Float64.cc Str.cc Url.cc \
	   Vector.cc Array.cc Structure.cc Sequence.cc \
	   Grid.cc UInt32.cc util.cc xdrutil_ppc.c ce_functions.cc \
	   GSEClause.cc Int16.cc UInt16.cc Float32.cc Constructor.cc \
	   PassiveByte.cc PassiveInt32.cc PassiveFloat64.cc PassiveStr.cc \
	   PassiveUrl.cc PassiveUInt32.cc PassiveInt16.cc PassiveUInt16.cc \
	   PassiveFloat32.cc PassiveArray.cc PassiveStructure.cc \
	   util_mit.cc BaseTypeFactory.cc

TYPEOBJS = BaseType.o Byte.o Int32.o Float64.o Str.o Url.o \
	   Vector.o Array.o Structure.o Sequence.o Grid.o \
           UInt32.o util.o xdrutil_ppc.o ce_functions.o GSEClause.o \
	   Int16.o UInt16.o Float32.o Constructor.o \
	   PassiveByte.o PassiveInt32.o PassiveFloat64.o PassiveStr.o \
	   PassiveUrl.o PassiveUInt32.o PassiveInt16.o PassiveUInt16.o \
	   PassiveFloat32.o PassiveArray.o PassiveStructure.o \
	   util_mit.o BaseTypeFactory.o $(GSE_GRAM_OBJS) 

GNUSRCS = GNU/GetOpt.cc GNU/Regex.cc GNU/error.cc \
	   IteratorAdapter.cc ArrayIterAdapter.cc AttrIterAdapter.cc \
	   BTIterAdapter.cc ClauseIterAdapter.cc  regex-0.12/regex.c

GNUOBJS = GNU/GetOpt.o GNU/Regex.o GNU/error.o \
	   IteratorAdapter.o ArrayIterAdapter.o AttrIterAdapter.o \
	   BTIterAdapter.o ClauseIterAdapter.o regex-0.12/regex.o

GNUHDRS = GNU/builtin.h GNU/Pix.h GNU/GetOpt.h GNU/Regex.h \
	   IteratorAdapter.h ArrayIterAdapter.h AttrIterAdapter.h \
	   BTIterAdapter.h ClauseIterAdapter.h

TESTSRCS = TestByte.cc TestInt32.cc TestFloat64.cc TestStr.cc TestUrl.cc \
	   TestArray.cc TestStructure.cc TestSequence.cc \
	   TestGrid.cc TestUInt32.cc TestInt16.cc TestUInt16.cc \
	   TestFloat32.cc TestCommon.cc TestTypeFactory.cc

TESTOBJS = TestByte.o TestInt32.o TestFloat64.o TestStr.o TestUrl.o \
	   TestArray.o TestStructure.o TestSequence.o \
	   TestGrid.o TestUInt32.o TestInt16.o TestUInt16.o TestFloat32.o \
	   TestCommon.o TestTypeFactory.o

TESTPROGSRCS = das-test.cc dds-test.cc expr-test.cc error-test.cc getdap.cc \
	   ThreadTest.cc server_handler.cc

AISSRCS = AISResources.cc AISDatabaseParser.cc AISMerge.cc AISConnect.cc
AISHDRS = AISConnect.h AISMerge.h AISExceptions.h AISDatabaseParser.h \
	  AISResources.h Resource.h
AISOBJS = AISResources.o AISDatabaseParser.o AISMerge.o AISConnect.o

ALLSRCS = $(DASSRCS) $(DDSSRCS) $(EXPRSRCS) $(TYPESRCS) $(TESTSRCS) \
	  $(TESTPROGSRCS) $(GRAM_SRCS) $(CLIENTSRCS) $(UTILSRCS) $(AISSRCS) \
	  $(DDXSRCS)

all: grammars $(PROG)

libdap++.a: $(DASOBJS) $(DDSOBJS) $(TYPEOBJS) $(GNUOBJS) $(ERROROBJS) \
	    $(EXPROBJS) $(UTILOBJS) $(CLIENTOBJS) $(AISOBJS) $(DDXOBJS)
	    $(AR) cru $@ $?
	    $(RANLIB) $@

libtest-types++.a: $(TESTOBJS)
	    $(AR) cru $@ $?
	    $(RANLIB) $@

deflate: deflate.o
	$(CC) $(LDFLAGS) -o deflate deflate.o -lz

# getdap is really a test driver, but it is so useful in other contexts that
# I have decided to build it as part of the `all' target. jhrg 7/11/96

getdap: libdap++.a getdap.o
	$(CXX) $(LDFLAGS) -o getdap getdap.o -ldap++ $(LIBS) 

# The program named usage is the filter that is run by the CGI dispatch
# script as the `usage server'. This filter is the same for all different
# server types so it does not need to be specialized for each API.

usage: libdap++.a usage.o
	$(CXX) $(LDFLAGS) -o usage usage.o libdap++.a $(LIBS)

# Build the test drivers

das-test: libdap++.a das-test.o das.tab.h
	$(CXX) $(LDFLAGS) -o das-test das-test.o libdap++.a $(LIBS)

dds-test: libdap++.a dds-test.o dds.tab.h
	$(CXX) $(LDFLAGS) -o dds-test dds-test.o libdap++.a $(LIBS)

gse-test: libdap++.a lex.gse.o gse-test.o \
	gse.tab.o
	$(CXX) $(LDFLAGS) -o gse-test lex.gse.o gse-test.o gse.tab.o \
		libdap++.a $(LIBS)

expr-test: libdap++.a libtest-types++.a expr-test.o expr.tab.h
	$(CXX) $(LDFLAGS) -o expr-test expr-test.o lex.expr.o \
	       libdap++.a libtest-types++.a $(LIBS)

error-test: error-test.o Error.tab.h $(ERROROBJS) 
	$(CXX) $(LDFLAGS) -o error-test error-test.o $(ERROROBJS) \
		libdap++.a $(LIBS)

# Build a summary test for Dods running in a Multi-threaded mode
ThreadTest: ThreadTest.o
	$(CXX) $(LDFLAGS) -o ThreadTest ThreadTest.o libdap++.a $(LIBS)

server_handler: server_handler.o $(TESTOBJS) libdap++.a
	$(CXX) $(LDFLAGS) -o $@ $^ $(LIBS)

# The grammar targets.

grammars: lex.das.c das.tab.h lex.dds.c dds.tab.h lex.expr.c expr.tab.h \
	lex.Error.c Error.tab.h lex.gse_.c gse.tab.h

# Build the DAS scanner (a C source module compiled with C++)

lex.das.c: das.lex das.tab.c das.tab.h
	$(LEX) $(LFLAGS) -Pdas das.lex

lex.das.o: lex.das.c
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -Wno-unused -c lex.das.c -o lex.das.o

# Build the DAS parser
# Note that awk is used to add a param to dasparse().

das.tab.c das.tab.h: das.y DAS.h
	$(YACC) $(YFLAGS) -p das das.y

das.tab.o: das.tab.c das.y DAS.h # build using C++ compiler
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c das.tab.c -o das.tab.o

# Build the DDS Scanner.

lex.dds.c: dds.lex dds.tab.c dds.tab.h
	$(LEX) $(LFLAGS) -Pdds dds.lex

lex.dds.o: lex.dds.c
	$(CXX) $(CXXFLAGS) $(CPPFLAGS)  -Wno-unused -c lex.dds.c -o lex.dds.o

# Build the DDS parser

dds.tab.c dds.tab.h: dds.y
	$(YACC) $(YFLAGS) -p dds dds.y

dds.tab.o: dds.tab.c dds.y      # build using C++ compiler
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c dds.tab.c -o dds.tab.o

# Build the CE Scanner.

lex.expr.c: expr.lex expr.tab.c expr.tab.h
	$(LEX) $(LFLAGS) -Pexpr expr.lex

lex.expr.o: lex.expr.c
	$(CXX) $(CXXFLAGS) $(CPPFLAGS)  -Wno-unused -c lex.expr.c -o lex.expr.o

# Build the CE parser

expr.tab.c expr.tab.h: expr.y
	$(YACC) $(YFLAGS) -p expr expr.y

expr.tab.o: expr.tab.c expr.y		# build using C++ compiler
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c expr.tab.c -o expr.tab.o

# Build the grid selection sub_expression scanner and parser

lex.gse_.c: gse.lex gse.tab.c gse.tab.h
	$(LEX) $(LFLAGS) -Pgse_ gse.lex

lex.gse.o: lex.gse_.c
	$(CXX) $(CXXFLAGS) $(CPPFLAGS)  -Wno-unused -c lex.gse_.c -o lex.gse.o

gse.tab.c gse.tab.h: gse.y
	$(YACC) $(YFLAGS) -p gse_ gse.y

gse.tab.o: gse.tab.c gse.y 		# build using C++ compiler
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c gse.tab.c -o gse.tab.o

# Build the Error object scanner.

lex.Error.c: Error.lex Error.tab.c Error.tab.h
	$(LEX) $(LFLAGS) -PError Error.lex

lex.Error.o: lex.Error.c
	$(CXX) $(CXXFLAGS) $(CPPFLAGS)  -Wno-unused -c lex.Error.c -o lex.Error.o

# Build the Error object parser.

Error.tab.c Error.tab.h: Error.y
	$(YACC) $(YFLAGS) -p Error Error.y

Error.tab.o: Error.tab.c Error.y	# build using C++ compiler
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c Error.tab.c -o Error.tab.o

# Standard targets

install: all install-headers install-getdap install-libdap-config install-usage install-deflate
	-mkdir -p $(libdir)
	$(INSTALL_DATA) libdap++.a $(libdir)/libdap++.a.@PACKAGE_VERSION@
	$(RANLIB) $(libdir)/libdap++.a.@PACKAGE_VERSION@
	$(LN_S) $(libdir)/libdap++.a.@PACKAGE_VERSION@ $(libdir)/libdap++.a

install-headers:
	-mkdir -p $(includedir).@PACKAGE_VERSION@
	for h in $(ERRORHDRS) $(EXPRHDRS) $(TYPEHDRS) $(DDSHDRS) $(DASHDRS) \
		 $(GNUHDRS) $(CLIENTHDRS) $(UTILHDRS) $(AISHDRS) $(DDXHDRS) \
		 debug.h dods-limits.h ; \
	    do $(INSTALL_DATA) $$h $(includedir).@PACKAGE_VERSION@; done
	$(LN_S) $(includedir).@PACKAGE_VERSION@ $(includedir)

install-getdap: getdap
	-mkdir -p $(bindir)
	$(INSTALL_PROGRAM) -s getdap $(bindir)

install-libdap-config:
	-mkdir -p $(bindir)
	$(INSTALL_PROGRAM) libdap-config $(bindir)

# usage and deflate are part of the DODS server. 02/10/98 jhrg

install-usage: usage
	-mkdir -p $(sbindir)
	$(INSTALL_PROGRAM) -s usage $(sbindir)

install-deflate: deflate
	-mkdir -p $(sbindir)
	$(INSTALL_PROGRAM) -s deflate $(sbindir)

aclocal.m4: acinclude.m4
	aclocal

configure: configure.ac aclocal.m4
	autoconf

Makefile: Makefile.in
	if [ -x ./config.status ]; \
	then \
	    ${SHELL} ./config.status; \
	else \
	    ./configure; \
	fi

check: libdap++.a das-check dds-check expr-check

test-coverage: clean
	$(MAKE) $(MFLAGS) CXXFLAGS="$(CXXFLAGS) $(TEST_COV_FLAGS)" check

# Note that the gcov options -f and -b are useful but sometimes make looking
# at the results of coverage analysis a little taxing. -b reports on all
# branched and -f reports on all functions. The -l -o options summarize on a
# per-file basis. 3/27/98 jhrg
collect-coverage-data:
	(cd test-coverage; \
         cov_dat="coverage-data-`date +%m.%d.%y`"; \
	 touch $$cov_dat; \
	 for f in $(ALLSRCS); do \
	     echo "\n*** Coverage data for $$f ***\n" >> $$cov_dat; \
	     gcov -l -o ../ $$f >> $$cov_dat; \
         done)

# To perform memory testing, use
# DASTEST="valgrind --leak-check=yes --logfile=das_memcheck ./das-test"
#
# Also make sure to export GLIBCPP_FORCE_NEW=1 in the shell that executes the
# tests. This will keep libstdc++ from pooling memory which will keep
# valgrind from reporting those blocks as still reachable.
#
# Collate the das_memcheck.pid* file using: for f in `ls -1
# das_memcheck.pid*`; do cat $f >> das_memcheck; done

das-check: das-test
	${RUNTEST} ${RUNTESTFLAGS} --tool das-test --srcdir das-testsuite

# DDSTEST
dds-check: dds-test
	${RUNTEST} ${RUNTESTFLAGS} --tool dds-test --srcdir dds-testsuite

# EXPRTEST
expr-check: expr-test
	${RUNTEST} ${RUNTESTFLAGS} --tool expr-test --srcdir expr-testsuite

# A Summary run of a test for threads
thread-check: ThreadTest
	./ThreadTest

# This tests the servers

# GETDAP
server-check: getdap
	${RUNTEST} ${RUNTESTFLAGS} --tool getdap --srcdir server-testsuite

# GETDAP
grid-func-check: getdap
	${RUNTEST} ${RUNTESTFLAGS} --tool getdap --srcdir grid-func-testsuite

# Listing the unit test code here gets the depend target to build
# dependencies for these files.
UNIT_TEST_SRCS = HTTPCacheTest.cc HTTPConnectTest.cc cgiUtilTest.cc \
	AttrTableTest.cc DDSTest.cc SequenceTest.cc ByteTest.cc DASTest.cc \
	generalUtilTest.cc parserUtilTest.cc AISDatabaseParserTest.cc \
	AISResourcesTest.cc AISMergeTest.cc DODSFilterTest.cc \
	SignalHandlerTest.cc RCReaderTest.cc DDXParserTest.cc ArrayTest.cc

UNIT_TEST_PROGS = HTTPCacheTest HTTPConnectTest cgiUtilTest AttrTableTest \
	DDSTest SequenceTest ByteTest DASTest generalUtilTest \
	parserUtilTest AISDatabaseParserTest AISResourcesTest AISMergeTest \
	DODSFilterTest SignalHandlerTest RCReaderTest DDXParserTest \
	ArrayTest

# Build the unit tests. Requires CppUnit be installed.

ArrayTest: ArrayTest.o libdap++.a
	$(CXX) -o $@ $(LDFLAGS) $< -lcppunit -ldap++ $(LIBS)

DDXParserTest: DDXParserTest.o libdap++.a
	$(CXX) -o $@ $(LDFLAGS) $< -lcppunit -ldap++ $(LIBS)

RCReaderTest: RCReaderTest.o libdap++.a
	$(CXX) -o $@ $(LDFLAGS) $< -lcppunit -ldap++ $(LIBS)

SignalHandlerTest: SignalHandlerTest.o libdap++.a
	$(CXX) -o $@ $(LDFLAGS) $< -lcppunit -ldap++ $(LIBS)

DODSFilterTest: DODSFilterTest.o libdap++.a
	$(CXX) -o $@ $(LDFLAGS) $< -lcppunit -ldap++ $(LIBS)

AISMergeTest: AISMergeTest.o libdap++.a
	$(CXX) -o $@ $(LDFLAGS) $< -lcppunit -ldap++ $(LIBS)

AISDatabaseParserTest: AISDatabaseParserTest.o libdap++.a
	$(CXX) -o $@ $(LDFLAGS) $< -lcppunit -ldap++ $(LIBS)

AISResourcesTest: AISResourcesTest.o libdap++.a
	$(CXX) -o $@ $(LDFLAGS) $< -lcppunit -ldap++ $(LIBS)

parserUtilTest: parserUtilTest.o libdap++.a
	$(CXX) -o $@ $(LDFLAGS) $< -lcppunit -ldap++ $(LIBS)

generalUtilTest: generalUtilTest.o libdap++.a
	$(CXX) -o $@ $(LDFLAGS) $< -lcppunit -ldap++ $(LIBS)

DASTest: DASTest.o libdap++.a
	$(CXX) -o $@ $(LDFLAGS) $< -lcppunit -ldap++ $(LIBS)

ByteTest: ByteTest.o libdap++.a
	$(CXX) -o $@ $(LDFLAGS) $< -lcppunit -ldap++ $(LIBS)

SequenceTest: SequenceTest.o libdap++.a
	$(CXX) -o $@ $(LDFLAGS) $< -lcppunit -ldap++ $(LIBS)

AttrTableTest: AttrTableTest.o libdap++.a
	$(CXX) -o $@ $(LDFLAGS) $< -lcppunit -ldap++ $(LIBS)

DDSTest: DDSTest.o libdap++.a
	$(CXX) -o $@ $(LDFLAGS) $< -lcppunit -ldap++ $(LIBS)

cgiUtilTest: cgiUtilTest.o libdap++.a 
	$(CXX) -o $@ $(LDFLAGS) $< -lcppunit -ldap++ $(LIBS)

HTTPCacheTest: HTTPCacheTest.o libdap++.a
	$(CXX) -o $@ $(LDFLAGS) $< -lcppunit -ldap++ $(LIBS)

HTTPConnectTest: HTTPConnectTest.o libdap++.a
	$(CXX) -o $@ $(LDFLAGS) $< -lcppunit -ldap++ $(LIBS)

unit-check: $(UNIT_TEST_PROGS)
	@echo "If using valgrind, export GLIBCPP_FORCE_NEW (gcc 3.2.2+)"
	@echo "and build using CXXDEBUG_FLAGS."
	-for t in $(UNIT_TEST_PROGS); do echo $$t; $(VALGRIND) ./$$t; done
	-rm memcheck
	-for m in `ls -1 memcheck.pid*`; do cat $$m >> memcheck; rm $$m; done
	-(cd tests && $(MAKE) $(MFLAGS) all)

# Clean up.

clean:	
	-rm -f *.o *.sum *.log *~ core
	-rm -f *.bb *.bbg *.da *.gcov
	-for d in GNU; do cd $$d && rm -f *.o *~; cd ..; done
	-for d in regex-*; do cd $$d && rm -f *.o *~; cd ..; done
	-rm -f $(PROG) das-test dds-test expr-test error-test gse-test
	-rm -f $(UNIT_TEST_PROGS)
	-rm -rf docs unit_tests
	-(cd tests; $(MAKE) $(MFLAGS) clean)

distclean: clean
	-rm -f config.status config.log config.cache

# I added this so that distclean will not wipe these files out. Thus people
# without GNU bison/flex (e.g., Dec Alphas which have a scanner generator
# called `flex' which is definately not a recent GNU flex) can still build
# the DAP software. Few people should want to hack these grammar files.

grammarclean: clean
	-rm -f lex.das.c das.tab.c das.tab.h 
	-rm -f lex.dds.c dds.tab.c dds.tab.h
	-rm -f lex.expr.c expr.tab.c expr.tab.h 
	-rm -f lex.Error.c Error.tab.c Error.tab.h
	-rm -f lex.gse_.c gse.tab.c gse.tab.h

# In order to get the latex docs to work (compile w/latex) you need the
# docxx.sty file where latex will find it. 9/15/98 jhrg
# The documentation is built and stored in a subdirectory called 'docs.'
.PHONY: docs
docs:
	@echo "Building reference documentation."
	doxygen doxy.conf

.PHONY: private_docs
private_docs:
	@echo "Building reference documentation."
	doxygen doxy_private.conf

.PHONY: tar
tar: distclean
	cd .. && \
	$(TAR) --exclude 'CVS' --exclude 'old' --exclude '.#*' \
		--exclude '.flc' --exclude 'tmp' --exclude 'Makefile' \
	  	--gzip --create --file \
		@PACKAGE_TARNAME@-@PACKAGE_VERSION@.tar.gz @PACKAGE_NAME@

.PHONY: binary-tar
binary-tar:
	@echo "Not implemented!"

.PHONY: tags
tags:
	$(TAGS) $(TAGS_FLAGS) *.cc *.h *.lex *.y

.PHONY: depend
depend: 
	@depend@ -m Makefile.in -- $(CPPFLAGS) -- \
	$(CLIENTSRCS) $(DASSRCS) $(DDSSRCS) $(EXPRSRCS) $(TYPESRCS) \
	$(ERRORSRCS) $(AISSRCS) $(TESTSRCS) $(TESTPROGSRCS) $(UTILSRCS) \
	$(UNIT_TEST_SRCS) $(AISSRCS) $(DDXSRCS) $(GNUSRCS)
	-(cd tests && $(MAKE) $(MFLAGS) depend)
	$(MAKE) $(MFLAGS) Makefile

.SUFFIXES:      .o .cc .c

.c.o:
	$(CC) -c $(CFLAGS) $(CPPFLAGS) -o $@ $<

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(CPPFLAGS) -o $@ $<

# DO NOT DELETE; depend requires this line
