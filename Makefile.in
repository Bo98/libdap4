
# $Id: Makefile.in,v 1.33 1996/04/04 18:16:57 jimg Exp $

@SET_MAKE@

# Set makefile variables, some with values supplied by configure 
# DEFS gets the `-D' defines that describe what a particular system has
# or doesn't have.

# the programs das-, dds- and trans-test are used to test parts of the
# library. The library libdap++.a contains the code for the generation of the
# DAS and DDS structures plus the code for data transmission and the GNU
# libg++.a classes Map, Stack, Plex and Vec.

PROG= libdap++.a
DODS_ROOT = ../..

INCS = -I. -IMap -IStack -IPlex -IVec -I../errmsg -I../netio
DEFS = @DEFS@ -DUSE_LIBGXX_INLINES
CPPFLAGS = @CPPFLAGS@ $(DEFS) $(INCS)
CXXFLAGS = @CXXFLAGS@
LDFLAGS = @LDFLAGS@ -L. -L../netio -L$(DODS_ROOT)/lib
LFLAGS = -8
YFLAGS = -d
LIBS = -ldap++ -lerrmsg @LIBS@
TAGS_FLAGS = -b

# Set the instalation directories; prefix can be set on the command line
# during Makefile construction with `./configure --prefix /my/choice'

prefix = @prefix@
exec_prefix = $(prefix)
bindir = $(exec_prefix)/bin
libdir = $(exec_prefix)/lib
includedir = $(prefix)/include
manext = 1
mandir = $(prefix)/man/man$(manext)

src = $(DODS_ROOT)/src
etcdir = $(DODS_ROOT)/etc

INSTALLMAN = man

SHELL = /bin/sh
srcdir = @srcdir@
VPATH = @srcdir@:Map:Stack:Plex:Vec
dir = @dir@

# testsuite specifics
RUNTEST = runtest
RUNTESTFLAGS = #--all --verbose

# names of key programs

LN_S = @LN_S@
CP = cp
AWK = @AWK@
CC = @CC@
CXX = @CXX@
YACC = @YACC@
LEX = @LEX@
AR = ar
TAGS = etags
RANLIB = @RANLIB@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@

DAS_GRAM_OBJS = lex.das.o das.tab.o parser-util.o
DDS_GRAM_OBJS = lex.dds.o dds.tab.o parser-util.o
EXPR_GRAM_OBJS = lex.expr.o expr.tab.o expr.o

DASHDRS = AttrTable.h DAS.h 
DASSRCS = AttrTable.cc DAS.cc
DASOBJS = AttrTable.o DAS.o $(DAS_GRAM_OBJS)

DDSHDRS = DDS.h
DDSSRCS = DDS.cc
DDSOBJS = DDS.o $(TYPEOBJS) $(DDS_GRAM_OBJS) $(EXPR_GRAM_OBJS)

EXPRHDRS = expr.h
EXPRSRCS = expr.cc
EXPROBJS = DDS.o $(TYPEOBJS) $(EXPR_GRAM_OBJS)

TYPEHDRS = BaseType.h Byte.h Int32.h Float64.h Str.h Url.h \
	   Vector.h List.h Array.h Structure.h Sequence.h Function.h Grid.h

TYPESRCS = BaseType.cc Byte.cc Int32.cc Float64.cc Str.cc Url.cc \
	   Vector.cc List.cc Array.cc Structure.cc Sequence.cc Function.cc \
	   Grid.cc util.cc

TYPEOBJS = BaseType.o Byte.o Int32.o Float64.o Str.o Url.o \
	   Vector.o List.o Array.o Structure.o Sequence.o Function.o Grid.o \
	   util.o

# These object files are built using source code generated from the GNU
# libg++ source with `genclass'. They are part of the the DAP library.

GNUOBJS = BaseTypeVec.o String.Plex.o String.XPlex.o BTPlex.o BTStack.o \
	  BTXPStack.o BTXPlex.o AttrMap.o AttrVHMap.o DASMap.o DASVHMap.o

GNUHDRS = Map/AttrMap.h        Plex/String.Plex.h   Stack/BTXPlex.h	\
	  Map/AttrVHMap.h      Plex/String.XPlex.h  Stack/BTdefs.h	\
	  Map/Attrdefs.h       Plex/String.defs.h   Vec/BaseTypeVec.h	\
	  Map/DASMap.h         Stack/BTPlex.h       Vec/BaseTypedefs.h	\
	  Map/DASVHMap.h       Stack/BTStack.h	    Map/DASdefs.h       \
	  Stack/BTXPStack.h

TESTSRCS = TestByte.cc TestInt32.cc TestFloat64.cc TestStr.cc TestUrl.cc\
	   TestArray.cc TestStructure.cc TestList.cc TestSequence.cc\
	   TestFunction.cc TestGrid.cc

TESTOBJS = TestByte.o TestInt32.o TestFloat64.o TestStr.o TestUrl.o\
	   TestArray.o TestStructure.o TestList.o TestSequence.o\
	   TestFunction.o TestGrid.o

all: $(PROG)

libdap++.a: $(DASOBJS) $(DDSOBJS) $(TYPEOBJS) $(GNUOBJS)
	$(AR) -cru $@ $?
	$(RANLIB) $@

# Build the test drivers

das-test: libdap++.a das-test.o das.tab.h
	$(CXX) $(LDFLAGS) -o das-test das-test.o $(LIBS)

dds-test: libdap++.a $(TESTOBJS) dds-test.o dds.tab.h
	$(CXX) $(LDFLAGS) -o dds-test $(TESTOBJS) dds-test.o $(LIBS)

trans-test: libdap++.a $(TESTOBJS) trans-test.o
	$(CXX) $(LDFLAGS) -o trans-test $(TESTOBJS) trans-test.o $(LIBS)

expr-test: libdap++.a $(EXPROBJS) $(TESTOBJS) expr-test.o expr.tab.h
	$(CXX) $(LDFLAGS) -o expr-test $(EXPROBJS) $(TESTOBJS) expr-test.o \
		-lnetio $(LIBS)

# Build the DAS scanner (a C source module compiled with C++)

lex.das.c: das.lex das.tab.c das.tab.h
	$(LEX) $(LFLAGS) -Pdas das.lex

lex.das.o: lex.das.c
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c lex.das.c -o lex.das.o

# Build the DAS parser
# Note that awk is used to add a param to dasparse().

das.tab.c das.tab.h: das.y DAS.h munge-das.awk
	$(YACC) $(YFLAGS) -p das das.y
	$(AWK) -f munge-das.awk das.tab.c > tmp
	mv tmp das.tab.c

das.tab.o: das.tab.c		# build using C++ compiler
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c das.tab.c -o das.tab.o

# Build the DDS Scanner.

lex.dds.c: dds.lex dds.tab.c dds.tab.h
	$(LEX) $(LFLAGS) -Pdds dds.lex

lex.dds.o: lex.dds.c
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c lex.dds.c -o lex.dds.o

# Build the DDS parser

dds.tab.c dds.tab.h: dds.y munge-dds.awk
	$(YACC) $(YFLAGS) -p dds dds.y
	$(AWK) -f munge-dds.awk dds.tab.c > tmp
	mv tmp dds.tab.c

dds.tab.o: dds.tab.c		# build using C++ compiler
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c dds.tab.c -o dds.tab.o

# Build the CE Scanner.

lex.expr.c: expr.lex expr.tab.c expr.tab.h
	$(LEX) $(LFLAGS) -Pexpr expr.lex

lex.expr.o: lex.expr.c
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c lex.expr.c -o lex.expr.o

# Build the CE parser

expr.tab.c expr.tab.h: expr.y munge-expr.awk
	$(YACC) $(YFLAGS) -p expr expr.y
	$(AWK) -f munge-expr.awk expr.tab.c > tmp
	mv tmp expr.tab.c

expr.tab.o: expr.tab.c		# build using C++ compiler
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c expr.tab.c -o expr.tab.o

# Standard targets with some customization for das-test and dds-test

install: all install-headers
	$(INSTALL_DATA) libdap++.a $(libdir)
	$(RANLIB) $(libdir)/libdap++.a

install-headers:
	$(INSTALL_DATA) config_dap.h $(includedir)
	$(INSTALL_DATA) debug.h $(includedir)
	$(INSTALL_DATA) dods-limits.h $(includedir)
	for h in $(EXPRHDRS) $(TYPEHDRS) $(DDSHDRS) $(DASHDRS) $(GNUHDRS); \
	    do $(INSTALL_DATA) $$h $(includedir); done

Makefile: ${srcdir}/Makefile.in
	cd .. && ${SHELL} ./config.status && cd $(dir)

check: libdap++.a das-check dds-check trans-check

# these tests all fail when das-test is linked with -lnew_debug.

das-check: das-test
	-rootme=`pwd` && export rootme && \
	${RUNTEST} ${RUNTESTFLAGS} --tool das-test --srcdir das-testsuite

dds-check: dds-test
	-rootme=`pwd` && export rootme && \
	${RUNTEST} ${RUNTESTFLAGS} --tool dds-test --srcdir dds-testsuite

trans-check: trans-test
	-rootme=`pwd`; export rootme; \
	${RUNTEST} ${RUNTESTFLAGS} --tool trans-test --srcdir trans-testsuite

clean:	
	-rm -f *.o *.sum *.log *~ core
	-rm -f $(PROG) das-test dds-test trans-test

distclean: clean
	-rm -f config.status config.log config.cache

# I added this so tat distclean will not wipe these files out. Thus people
# without GNU bison/flex (e.g., Dec Alphas which have a scanner generator
# called `flex' which is definately not a recent GNU flex) can still build
# the DAP software. Few people should want to hack these grammar files.

grammarclean: clean
	-rm -f lex.das.c das.tab.c das.tab.h lex.dds.c dds.tab.c dds.tab.h

tar:
	cd .. && tar --exclude $(dir)/old --gzip -c -f $(dir).tar.gz $(dir) &&\
		cd $(dir)

tags:
	$(TAGS) $(TAGS_FLAGS) *.cc *.h *.lex *.y

# To get the headers installed in the $(DODS_ROOT)/include directory, you
# must run `make install-headers'

# I added the install of config_dap.h to the depend target so that the files
# in DODS_ROOT/include would be correct even without users running `make
# install'.
depend: 
	@depend@ -- $(INCS) -I/usr/local/lib/g++-include -- \
	$(DASSRCS) $(DDSSRCS) $(TYPESRCS) $(EXPRSRCS) $(TESTSRCS) \
	das-test.cc dds-test.cc  

dds.tab.o: dds.tab.c dds.tab.h DDS.h BaseType.h Byte.h Int32.h Float64.h \
  Str.h Url.h Array.h List.h Structure.h Sequence.h Function.h \
  Grid.h Stack/BTXPStack.h Stack/BTXPlex.h Stack/BTPlex.h Stack/BTdefs.h \
  Stack/BTStack.h 

das.tab.c: DAS.h

.SUFFIXES:      .o .cc .c

.c.o:
	$(CC) -c $(CFLAGS) $(CPPFLAGS) -o $@ $<

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(CPPFLAGS) -o $@ $<

# DO NOT DELETE THIS LINE -- make depend depends on it.





