# $Id: Makefile.in,v 1.8 1994/10/25 15:27:05 jimg Exp $

@SET_MAKE@

# Set makefile variables, some with values supplid by configure 
# DEFS gets the `-D' defines that describe what a particular system has
# or doesn't have.

PROG= das-test dds-test libdas++.a libdds++.a
CFLAGS = -g -I$(DODS_ROOT)/include
CXXFLAGS = -g $(DEFS) -IMap -IStack -I. -I$(DODS_ROOT)/include 
LDFLAGS = -g -L$(DODS_ROOT)/lib
LFLAGS=-8
YFLAGS=-d
DODS_ROOT=../..
DEFS = @DEFS@ -DUSE_LIBGXX_INLINES
LIBS = -lg++map -lg++stack -lerrmsg @LIBS@

# Set the instalation directories; prefix can be set on the command line
# during Makefile construction with `./configure --prefix /my/choice'

prefix = ../..
exec_prefix = $(prefix)
bindir = $(exec_prefix)/bin
libdir = $(exec_prefix)/lib
includedir = $(prefix)/include
manext = 1
mandir = $(prefix)/man/man$(manext)

INSTALLMAN = man

SHELL = /bin/sh
srcdir = @srcdir@
VPATH = @srcdir@

# testsuite specifics
RUNTEST= runtest
RUNTESTFLAGS= #--all --verbose

# names of key programs

LN_S = @LN_S@
AWK = @AWK@
CC = @CC@
CXX = @CXX@
YACC = @YACC@
LEX = @LEX@
AR = ar
TAGS = etags
RANLIB = @RANLIB@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@

SUBDIRS=Stack Map

DAS_GRAM_OBJS=lex.das.o das.tab.o
DDS_GRAM_OBJS=lex.dds.o dds.tab.o

DASHDRS=AttrTable.h DAS.h
DASSRCS=AttrTable.cc DAS.cc
DASOBJS=AttrTable.o DAS.o $(DAS_GRAM_OBJS)

DDSHDRS=DDS.h
DDSSRCS=DDS.cc
DDSOBJS=DDS.o $(TYPEOBJS) $(DDS_GRAM_OBJS) 

TYPEHDRS=BaseType.h Byte.h Int32.h Float64.h Str.h Url.h \
         CtorType.h List.h Array.h Structure.h Sequence.h Function.h Grid.h
TYPESRCS=BaseType.cc Byte.cc Int32.cc Float64.cc Str.cc Url.cc CtorType.cc \
         List.cc Array.cc Structure.cc Sequence.cc Function.cc Grid.cc util.cc
TYPEOBJS=BaseType.o Byte.o Int32.o Float64.o Str.o Url.o CtorType.o \
	 List.o Array.o Structure.o Sequence.o Function.o Grid.o util.o

# Added decent into SUBDIRS since it makes little sense to build these
# libraries without the Map and Stack code.

all: libdas++.a libdds++.a
	for d in $(SUBDIRS); do cd $$d; make; cd ..; done

# build the libraries

libdas++.a:  libdas++.a($(DASOBJS))
	     $(RANLIB) libdas++.a

libdds++.a:  libdds++.a($(DDSOBJS))
	     $(RANLIB) libdds++.a

# Build the test drivers

das-test:  $(DASOBJS) das-test.o
	$(CXX) $(LDFLAGS) -o das-test $(DASOBJS) das-test.o $(LIBS)

dds-test:   $(DDSOBJS) dds-test.o
	$(CXX) $(LDFLAGS) -o dds-test $(DDSOBJS) dds-test.o $(LIBS)

# Build the DAS scanner (a C object module compiled with C++)

lex.das.c: das.lex das.tab.c das.tab.h
	$(LEX) $(LFLAGS) -Pdas das.lex

lex.das.o: lex.das.c
	$(CXX) $(CXXFLAGS) -c lex.das.c -o lex.das.o

# Build the DAS parser
# Note that awk is used to add a param to dasparse().

das.tab.c das.tab.h: das.y DAS.h
	$(YACC) $(YFLAGS) -p das das.y
	$(AWK) -f munge-das.awk das.tab.c > tmp
	mv tmp das.tab.c

das.tab.o: das.tab.c		# build using C++ compiler
	$(CXX) $(CXXFLAGS) -c das.tab.c -o das.tab.o

# Build the DDS Scanner.

lex.dds.c: dds.lex dds.tab.c dds.tab.h
	$(LEX) $(LFLAGS) -Pdds dds.lex

lex.dds.o: lex.dds.c
	$(CXX) $(CXXFLAGS) -c lex.dds.c -o lex.dds.o

# Build the DDS parser

dds.tab.c dds.tab.h: dds.y

	$(YACC) $(YFLAGS) -p dds dds.y
	$(AWK) -f munge-dds.awk dds.tab.c > tmp
	mv tmp dds.tab.c

dds.tab.o: dds.tab.c		# build using C++ compiler
	$(CXX) $(CXXFLAGS) -c dds.tab.c -o dds.tab.o

# Standard targets with some customization for das-test and dds-test
#
# NB: it does not make much sense to install lib{das,dds}.a without the stack
# and map libraries also installed

install: install-libdas++.a install-libdds++.a
	for d in $(SUBDIRS); do cd $$d; make install; cd ..; done

install-libdas++.a:
	$(INSTALL_DATA) libdas++.a $(libdir)
	$(RANLIB) $(libdir)/libdas++.a
	for h in $(DASHDRS); do $(INSTALL_DATA) $$h $(includedir); done
	
install-libdds++.a:
	$(INSTALL_DATA) libdds++.a $(libdir)
	$(RANLIB) $(libdir)/libdds++.a
	for h in $(TYPEHDRS) $(DDSHDRS); \
	    do $(INSTALL_DATA) $$h $(includedir); done

Makefile: ${srcdir}/Makefile.in
	${SHELL} ./config.status

check: das-check dds-check 

# these tests all fail when das-test is linked with -lnew_debug.
das-check: das-test
	rootme=`pwd`; export rootme; \
	${RUNTEST} ${RUNTESTFLAGS} --tool das-test --srcdir das-testsuite

dds-check: dds-test
	rootme=`pwd`; export rootme; \
	${RUNTEST} ${RUNTESTFLAGS} --tool dds-test --srcdir dds-testsuite

clean:	
	-rm -f *.o *.sum *.log *~ core
	-rm -f lex.das.c das.tab.c das.tab.h lex.dds.c dds.tab.c dds.tab.h
	-rm -f $(PROG)
	for d in $(SUBDIRS); do cd $$d; make clean; cd ..; done

distclean: clean
	-rm -f config.status Makefile
	for d in $(SUBDIRS); do cd $$d; make distclean; cd ..; done

tar:

tags:
	$(TAGS) *.{cc,h,lex,y}

depend: 
	makedepend -- $(CXXFLAGS) -I/usr/local/lib/g++-include -- \
	$(DASSRCS) $(DDSSRCS) $(TYPESRCS) das-test.cc dds-test.cc 
	for d in $(SUBDIRS); do cd $$d; make depend; cd ..; done

dds.tab.o: dds.tab.c dds.tab.h DDS.h BaseType.h Byte.h Int32.h Float64.h \
  Str.h Url.h Array.h CtorType.h List.h Structure.h Sequence.h Function.h \
  Grid.h Stack/CTXPStack.h Stack/CTXPlex.h Stack/CTPlex.h Stack/CTdefs.h \
  CtorType.h Stack/CTStack.h 

das.tab.c: DAS.h

# DO NOT DELETE THIS LINE -- make depend depends on it.
