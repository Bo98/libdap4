
# $Id: Makefile.in,v 1.107 2000/01/05 22:34:32 jimg Exp $

@SET_MAKE@

# Set makefile variables, some with values supplied by configure 
# DEFS gets the `-D' defines that describe what a particular system has
# or doesn't have.

# The library libdap++.a contains the code for the generation of the DAS and
# DDS structures plus the code for data transmission and the GNU libg++.a
# classes Map, Stack and Vec.
# geturl is a simple program that uses the dap++ library plus others to fetch
# a url. In addition it can read and process DAS and DDS objects, displaying
# the print representation on the screen.

PROG = libdap++.a libclient++.a geturl usage deflate
DODS_ROOT = ../..

WWW_ROOT = @WWW_ROOT@
INCS = -I. -IGNU @INCS@
DEFS = @DEFS@ -DUSE_LIBGXX_INLINES -DGUI
CPPFLAGS = @CPPFLAGS@ $(DEFS) $(INCS)
CXXFLAGS = @CXXFLAGS@ -Wall
TEST_COV_FLAGS = -ftest-coverage -fprofile-arcs
LDFLAGS = @LDFLAGS@ -L. -L$(DODS_ROOT)/lib
LFLAGS = -8
YFLAGS = -d -v
TK_LIBS = @TK_LIBS@
LIBS = -ldap++ -lclient++ @LIBS@ $(TK_LIBS)
TAGS_FLAGS =

# Set the instalation directories; prefix can be set on the command line
# during Makefile construction with `./configure --prefix /my/choice'

prefix = @prefix@
exec_prefix = $(prefix)
bindir = $(exec_prefix)/bin
libdir = $(exec_prefix)/lib
includedir = $(prefix)/include
manext = 1
mandir = $(prefix)/man/man$(manext)

src = $(DODS_ROOT)/src
etcdir = $(DODS_ROOT)/etc

INSTALLMAN = man

SHELL = /bin/sh
srcdir = @srcdir@
version = @VERSION@
dir = dap-@VERSION@
host = @host@

COMPONENT_NAME = DODS Core
AWK = @AWK@
TAR = @TAR@
PERL = @PERL@

# testsuite specifics
RUNTEST = runtest
RUNTESTFLAGS = #--all --verbose

# names of key programs

LN_S = @LN_S@
CP = cp
AWK = @AWK@
CC = @CC@
CXX = @CXX@
PURIFY = purify -chain-length="10"
YACC = @YACC@
LEX = @LEX@
AR = ar
TAGS = etags
RANLIB = @RANLIB@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
STRIP = strip
DOCXX = doc++

CLIENTSRCS = Connect.cc Connections.cc 
CLIENTOBJS = Connect.o Connections.o 
CLIENTHDRS = Connect.h Connections.h Connections.cc

UTILSRCS = cgi_util.cc escaping.cc DODSFilter.cc
UTILOBJS = cgi_util.o escaping.o DODSFilter.o
UTILHDRS = cgi_util.h escaping.h DODSFilter.h

DAS_GRAM_OBJS = lex.das.o das.tab.o parser-util.o
DDS_GRAM_OBJS = lex.dds.o dds.tab.o parser-util.o
EXPR_GRAM_OBJS = lex.expr.o expr.tab.o RValue.o
ERROR_GRAM_OBJS = lex.Error.o Error.tab.o
GSE_GRAM_OBJS = lex.gse.o gse.tab.o
GRAM_SRCS = lex.das.c das.tab.c lex.dds.c dds.tab.c lex.expr.c expr.tab.c \
	    RValue.cc lex.Error.c Error.tab.c lex.gse_.c gse.tab.c

DASHDRS = AttrTable.h DAS.h parser.h
DASSRCS = AttrTable.cc DAS.cc parser-util.cc
DASOBJS = AttrTable.o DAS.o $(DAS_GRAM_OBJS)

DDSHDRS = DDS.h DataDDS.h
DDSSRCS = DDS.cc DataDDS.cc
DDSOBJS = DDS.o DataDDS.o $(DDS_GRAM_OBJS)
# $(EXPR_GRAM_OBJS) $(TYPEOBJS) 
EXPRHDRS = expr.h Clause.h RValue.h
EXPRSRCS = Clause.cc RValue.cc
EXPROBJS = Clause.o RValue.o $(EXPR_GRAM_OBJS)
# $(TYPEOBJS) 
ERRORHDRS = Error.h InternalErr.h
ERROROBJS = Error.o InternalErr.o $(ERROR_GRAM_OBJS)
ERRORSRCS = Error.cc InternalErr.cc

TYPEHDRS = BaseType.h Byte.h Int32.h GSEClause.h \
	   Float64.h Str.h Url.h Vector.h List.h Array.h Structure.h \
	   Sequence.h Grid.h UInt32.h util.h Int16.h UInt16.h Float32.h

TYPESRCS = BaseType.cc Byte.cc Int32.cc Float64.cc Str.cc Url.cc \
	   Vector.cc List.cc Array.cc Structure.cc Sequence.cc \
	   Grid.cc UInt32.cc util.cc ce_functions.cc GSEClause.cc \
	   Int16.cc UInt16.cc Float32.cc 

TYPEOBJS = BaseType.o Byte.o Int32.o Float64.o Str.o Url.o \
	   Vector.o List.o Array.o Structure.o Sequence.o Grid.o \
           UInt32.o util.o ce_functions.o GSEClause.o $(GSE_GRAM_OBJS) \
	   Int16.o UInt16.o Float32.o 

GUISRCS = Gui.cc dods_gui.c

GUIOBJS = Gui.o dods_gui.o

GNUOBJS = GNU/SLList.o GNU/DLList.o GNU/GetOpt.o GNU/Regex.o GNU/error.o 

GNUHDRS = GNU/Pix.h \
          GNU/SLList.h         GNU/DLList.h 	    GNU/gnu-std.h \
          GNU/GetOpt.h         GNU/Regex.h          GNU/builtin.h

TESTSRCS = TestByte.cc TestInt32.cc TestFloat64.cc TestStr.cc TestUrl.cc \
	   TestArray.cc TestStructure.cc TestList.cc TestSequence.cc \
	   TestGrid.cc TestUInt32.cc TestInt16.cc TestUInt16.cc TestFloat32.cc

TESTOBJS = TestByte.o TestInt32.o TestFloat64.o TestStr.o TestUrl.o \
	   TestArray.o TestStructure.o TestList.o TestSequence.o \
	   TestGrid.o TestUInt32.o TestInt16.o TestUInt16.o TestFloat32.o

TESTPROGSRCS = das-test.cc dds-test.cc expr-test.cc error-test.cc geturl.cc

ALLSRCS = $(DASSRCS) $(DDSSRCS) $(EXPRSRCS) $(TYPESRCS) $(TESTSRCS) \
	  $(TESTPROGSRCS) $(GRAM_SRCS) $(GUISRCS) $(CLIENTSRCS) $(UTILSRCS)

all: grammars $(PROG)

libdap++.a: $(DASOBJS) $(DDSOBJS) $(TYPEOBJS) $(GNUOBJS) $(ERROROBJS) \
	    $(EXPROBJS) $(UTILOBJS)
	    $(AR) cru $@ $?
	    $(RANLIB) $@

libclient++.a: $(GUIOBJS) $(CLIENTOBJS)
	    $(AR) cru $@ $?
	    $(RANLIB) $@

deflate: deflate.o
	$(CC) $(LDFLAGS) -o deflate deflate.o -lz

# geturl is really a test driver, but it is so useful in other contexts that
# I have decided to build it as part of the `all' target. jhrg 7/11/96

geturl: libdap++.a libclient++.a $(TESTOBJS) geturl.o
	$(CXX) $(LDFLAGS) -o geturl geturl.o $(TESTOBJS) $(LIBS)

pure-geturl: libdap++.a $(TESTOBJS) geturl.o
	$(PURIFY) $(CXX) $(LDFLAGS) -o geturl geturl.o $(TESTOBJS) $(LIBS)

# The program named usage is the filter that is run by the CGI dispatch
# script as the `usage server'. This filter is the same for all different
# server types so it does not need to be specialized for each API.

usage: libdap++.a libclient++.a $(TESTOBJS) usage.o
	$(CXX) $(LDFLAGS) -o usage usage.o $(TESTOBJS) $(LIBS)

# Build the test drivers

test-drivers: das-test dds-test expr-test error-test cgi-util-test www-test

das-test: libdap++.a libclient++.a $(TESTOBJS) das-test.o das.tab.h
	$(CXX) $(LDFLAGS) -o das-test $(TESTOBJS) das-test.o $(LIBS)

pure-das-test: libdap++.a libclient++.a $(TESTOBJS) das-test.o das.tab.h
	$(PURIFY) $(CXX) $(LDFLAGS) -o das-test $(TESTOBJS) das-test.o $(LIBS)

dds-test: libdap++.a libclient++.a $(TESTOBJS) dds-test.o dds.tab.h
	$(CXX) $(LDFLAGS) -o dds-test $(TESTOBJS) dds-test.o $(LIBS)

pure-dds-test: libdap++.a libclient++.a $(TESTOBJS) dds-test.o dds.tab.h
	$(PURIFY) $(CXX) $(LDFLAGS) -o dds-test $(TESTOBJS) dds-test.o $(LIBS)

gse-test: libdap++.a libclient++.a $(TESTOBJS) lex.gse.o gse-test.o \
	gse.tab.o
	$(CXX) $(LDFLAGS) -o gse-test lex.gse.o gse-test.o gse.tab.o \
		$(TESTOBJS) $(LIBS)

expr-test: libdap++.a libclient++.a $(TESTOBJS) expr-test.o expr.tab.h
	$(CXX) $(LDFLAGS) -o expr-test $(TESTOBJS) expr-test.o lex.expr.o \
	       $(LIBS)

pure-expr-test: libdap++.a $(TESTOBJS) expr-test.o expr.tab.h
	$(PURIFY) $(CXX) $(LDFLAGS) -o expr-test $(TESTOBJS) expr-test.o \
	       $(LIBS)

error-test: error-test.o Error.tab.h $(ERROROBJS) $(TESTOBJS)
	$(CXX) $(LDFLAGS) -o error-test error-test.o $(ERROROBJS) $(TESTOBJS) \
	$(LIBS)

cgi-util-test: libdap++.a cgi_util.o $(TESTOBJS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -DTEST_CGI_UTIL -c cgi_util.cc
	$(CXX) $(LDFLAGS) -o cgi-util-test cgi_util.o $(TESTOBJS) $(LIBS)
	-rm -f cgi_util.o

gui-test: util.o dods_gui.c Gui.cc
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -DTEST -c -g3 -O0 Gui.cc
	$(CC) $(CPPFLAGS) $(CFLAGS) -DTEST -c -g3 -O0 dods_gui.c
	$(CXX) $(LDFLAGS) -o gui-test Gui.o util.o dods_gui.o $(LIBS)

# The grammar targets.

grammars: lex.das.c das.tab.h lex.dds.c dds.tab.h lex.expr.c expr.tab.h \
	lex.Error.c Error.tab.h lex.gse_.c gse.tab.h

# Build the DAS scanner (a C source module compiled with C++)

lex.das.c: das.lex das.tab.c das.tab.h
	$(LEX) $(LFLAGS) -Pdas das.lex

lex.das.o: lex.das.c
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c lex.das.c -o lex.das.o

# Build the DAS parser
# Note that awk is used to add a param to dasparse().

das.tab.c das.tab.h: das.y munge-bison.awk DAS.h
	$(YACC) $(YFLAGS) -p das das.y
	$(AWK) -f munge-bison.awk das.tab.c > tmp
	mv tmp das.tab.c

das.tab.o: das.tab.c		# build using C++ compiler
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c das.tab.c -o das.tab.o

# Build the DDS Scanner.

lex.dds.c: dds.lex dds.tab.c dds.tab.h
	$(LEX) $(LFLAGS) -Pdds dds.lex

lex.dds.o: lex.dds.c
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c lex.dds.c -o lex.dds.o

# Build the DDS parser

dds.tab.c dds.tab.h: dds.y munge-bison.awk
	$(YACC) $(YFLAGS) -p dds dds.y
	$(AWK) -f munge-bison.awk dds.tab.c > tmp
	mv tmp dds.tab.c

dds.tab.o: dds.tab.c		# build using C++ compiler
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c dds.tab.c -o dds.tab.o

# Build the CE Scanner.

lex.expr.c: expr.lex expr.tab.c expr.tab.h
	$(LEX) $(LFLAGS) -Pexpr expr.lex

lex.expr.o: lex.expr.c
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c lex.expr.c -o lex.expr.o

# Build the CE parser

expr.tab.c expr.tab.h: expr.y munge-bison.awk
	$(YACC) $(YFLAGS) -p expr expr.y
	$(AWK) -f munge-bison.awk expr.tab.c > tmp
	mv tmp expr.tab.c

expr.tab.o: expr.tab.c		# build using C++ compiler
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c expr.tab.c -o expr.tab.o

# Build the grid selection sub_expression scanner and parser

lex.gse_.c: gse.lex gse.tab.c gse.tab.h
	$(LEX) $(LFLAGS) -Pgse_ gse.lex

lex.gse.o: lex.gse_.c
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c lex.gse_.c -o lex.gse.o

gse.tab.c gse.tab.h: gse.y munge-bison.awk
	$(YACC) $(YFLAGS) -p gse_ gse.y

gse.tab.o: gse.tab.c		# build using C++ compiler
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c gse.tab.c -o gse.tab.o

# Build the Error object scanner.

lex.Error.c: Error.lex Error.tab.c Error.tab.h
	$(LEX) $(LFLAGS) -PError Error.lex

lex.Error.o: lex.Error.c
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c lex.Error.c -o lex.Error.o

# Build the Error object parser.

Error.tab.c Error.tab.h: Error.y munge-bison.awk
	$(YACC) $(YFLAGS) -p Error Error.y
	$(AWK) -f munge-bison.awk Error.tab.c > tmp
	mv tmp Error.tab.c

Error.tab.o: Error.tab.c	# build using C++ compiler
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c Error.tab.c -o Error.tab.o

# Build the C file from the tcl file. This uses mktclapp which you can get
# from http://www.hwaci.com/drh/ (or contact drh@acm.org). Note that the .mta
# file was built using xmktclapp by including the dods_gui.tcl and Gui.cc
# files, and setting the mode standalone. Once done the mta file should not
# need to be rebuilt unless the tcl/tk version changes (this file was built
# for tcl/tk 8.1). 12/30/99 jhrg

dods_gui.c: dods_gui.tcl dods_gui.mta
	mktclapp -f dods_gui.mta > dods_gui.c
	mktclapp -f dods_gui.mta -header > dods_gui.h
	awk -f munge_dods_gui.awk dods_gui.c > tmp
	mv tmp dods_gui.c

# Standard targets with some customization for das-test and dds-test

install: all install-headers install-geturl install-usage install-deflate
	$(INSTALL_DATA) libdap++.a $(libdir)
	$(RANLIB) $(libdir)/libdap++.a
	$(INSTALL_DATA) libclient++.a $(libdir)
	$(RANLIB) $(libdir)/libclient++.a

install-headers:
	$(INSTALL_DATA) config_dap.h $(includedir)
	$(INSTALL_DATA) debug.h $(includedir)
	$(INSTALL_DATA) dods-limits.h $(includedir)
	for h in $(ERRORHDRS) $(EXPRHDRS) $(TYPEHDRS) $(DDSHDRS) $(DASHDRS) \
		 $(GNUHDRS) $(CLIENTHDRS) $(UTILHDRS); \
	    do $(INSTALL_DATA) $$h $(includedir); done

install-geturl: geturl
	$(INSTALL_PROGRAM) -s geturl $(bindir)

# usage and deflate are part of the DODS server. 02/10/98 jhrg

install-usage: usage
	$(INSTALL_PROGRAM) -s usage $(etcdir)

install-deflate: deflate
	$(INSTALL_PROGRAM) -s deflate $(etcdir)

configure: configure.in
	autoconf --localdir=$(DODS_ROOT)/etc

Makefile: Makefile.in
	if [ -x ./config.status ]; \
	then \
	    ${SHELL} ./config.status; \
	else \
	    ./configure; \
	fi

check: libdap++.a das-check dds-check expr-check

test-coverage: clean
	$(MAKE) $(MFLAGS) CXXFLAGS="$(CXXFLAGS) $(TEST_COV_FLAGS)" check

# Note that the gcov options -f and -b are useful but sometimes make looking
# at the results of coverage analysis a little taxing. -b reports on all
# branched and -f reports on all functions. The -l -o options summarize on a
# per-file basis. 3/27/98 jhrg
collect-coverage-data:
	(cd test-coverage; \
         cov_dat="coverage-data-`date +%m.%d.%y`"; \
	 touch $$cov_dat; \
	 for f in $(ALLSRCS); do \
	     echo "\n*** Coverage data for $$f ***\n" >> $$cov_dat; \
	     gcov -l -o ../ $$f >> $$cov_dat; \
         done)

# These tests all fail when linking with -lnew_debug.

das-check: das-test
	-rootme=`pwd` && export rootme && \
	${RUNTEST} ${RUNTESTFLAGS} --tool das-test --srcdir das-testsuite

dds-check: dds-test
	-rootme=`pwd` && export rootme && \
	${RUNTEST} ${RUNTESTFLAGS} --tool dds-test --srcdir dds-testsuite

expr-check: expr-test
	-rootme=`pwd` && export rootme && \
	${RUNTEST} ${RUNTESTFLAGS} --tool expr-test --srcdir expr-testsuite

error-check: error-test
	echo "No tests for the Error object"

# This tests the servers assuming that DODS has been installed on dcz, dods
# and rhody. It also assumes that the cgi bin directory `test' points to the
# place where the new servers are installed. On all of these machines there
# is a symbolic link `DODS-test' that should be linked to the top-level
# directory of the version to test *and* each machine's httpd.conf should
# list as a ScriptAlias .../DODS-test/etc. jhrg 12/30/97.

server-check: geturl
	-rootme=`pwd` && export rootme && \
	${RUNTEST} ${RUNTESTFLAGS} --tool geturl --srcdir server-testsuite

# Clean up.

clean:	
	-rm -f *.o *.sum *.log *~ core
	-rm -f *.bb *.bbg *.da *.gcov
	-for d in GNU; do cd $$d && rm *.o *~; cd ..; done
	-rm -f $(PROG) das-test dds-test expr-test error-test geturl \
	       cgi-util-test gse-test
	-cd doc-html; rm *.html; cd ..;
	-cd doc-latex; rm *.tex; cd ..;

distclean: clean
	-rm -f config.status config.log config.cache

# I added this so that distclean will not wipe these files out. Thus people
# without GNU bison/flex (e.g., Dec Alphas which have a scanner generator
# called `flex' which is definately not a recent GNU flex) can still build
# the DAP software. Few people should want to hack these grammar files.

grammarclean: clean
	-rm -f lex.das.c das.tab.c das.tab.h 
	-rm -f lex.dds.c dds.tab.c dds.tab.h
	-rm -f lex.expr.c expr.tab.c expr.tab.h 
	-rm -f lex.Error.c Error.tab.c Error.tab.h
	-rm -f lex.gse_.c gse.tab.c gse.tab.h

# In order to get the latex docs to work (compile w/latex) you need the
# docxx.sty file where latex will find it. 9/15/98 jhrg
.PHONY: docs
docs:
	@echo "Building reference documentation."
	-mkdir docs-html;
	$(DOCXX) -H -d docs-html -f -B /dev/null *.h
	-mkdir docs-latex;
	$(DOCXX) -t -o docs-latex/dap-reference.tex *.h

# This is a special tar target because it builds not only the tar file for
# the core software but also the lib, etc, and bin directories. It assumes
# that the root directory for DODS is called `DODS' (no version number).
.PHONY: tar
tar:
	-rm -r config.cache config.log config.status
	cd $(DODS_ROOT)/.. && \
	$(TAR) --exclude '*/nc*-dods*' --exclude '*/jg-dods*' 
	    --exclude '*/math-dods*' --exclude '*/dsp-dods*' \
	    --exclude '*/hdf-dods*' --exclude '*/tools*' \
	    --exclude '*/ff-dods*' --exclude '*/clients*' \
	    --exclude '*/doc' --exclude '*/packages*' \
	    --exclude '*/.#*' --exclude '*/CVS' --exclude '*/old' \
	    --exclude '*/.flc' --exclude '*/.snprj' \
	    --gzip --create --dereference --file DODS-$(dir).tar.gz DODS 

.PHONY: binary-tar
binary-tar:
	if [ ! -x $(DODS_ROOT)/etc/asciival \
	    -o ! -x $(DODS_ROOT)/etc/www_int ]; then \
	    echo "You must install asciival and www_interface first"; \
	else \
	    cd $(DODS_ROOT)/.. && \
	    $(TAR) --gzip --create --dereference \
		--file DODS-$(host)-dap-library-$(version).tar.gz \
		--exclude '*/CVS' \
		DODS/lib/libdap++.a \
		DODS/lib/libclient++.a \
		DODS/include && \
	    $(TAR) --gzip --create --dereference \
		--file DODS-$(host)-tools-$(version).tar.gz \
		DODS/etc/asciival && \
	    $(TAR) --gzip --create --dereference \
		--file DODS-$(host)-client-tools-$(version).tar.gz \
		DODS/etc/INSTALL-clients \
		DODS/bin/geturl \
		DODS/bin/urlqueue && \
	    $(TAR) --gzip --create --dereference \
		--file DODS-$(host)-server-tools-$(version).tar.gz \
		DODS/etc/INSTALL-servers \
		DODS/etc/asciival \
		DODS/etc/www_int \
		DODS/etc/deflate \
		DODS/etc/usage \
		DODS/etc/*.pm \
		DODS/etc/HTML DODS/etc/HTTP DODS/etc/LWP DODS/etc/MIME; \
	fi

.PHONY: update-version
update-version: check-version
	@echo "Version is: `cat version.h`"
	if [ ! -d ../$(dir) ]; then \
	    mv ../dap* ../$(dir);\
	fi
	touch $(DODS_ROOT)/VERSION; cat $(DODS_ROOT)/VERSION | \
	  $(AWK) ' \
	    BEGIN { found = 0 } \
	    { if ( $$0 ~ /^$(COMPONENT_NAME):/) \
	        { print "$(COMPONENT_NAME): $(version)"; found = 1 } \
	      else { print $$0 } } \
	    END { if ( ! found) { print "$(COMPONENT_NAME): $(version)" } \
	        }' > $(DODS_ROOT)/VERSION

# Compare the version encoded in this Makefile (set by configure) with the
# version in version.h. The version make variable is set up near the top of
# the Makefile.
.PHONY: check-version
check-version:
	@echo "Checking for version.h and Makefile version match-up"
	@if [ "$(version)" != "`cat version.h`" ]; \
	then \
		echo "You must manually re-run configure!"; \
		exit 1; \
	else \
		echo "Yes, they match."; \
	fi

.PHONY: tags
tags:
	$(TAGS) $(TAGS_FLAGS) *.cc *.h *.lex *.y

.PHONY: depend
depend: 
	@depend@ -m Makefile.in -- $(CPPFLAGS) -- \
	$(CLIENTSRCS) $(DASSRCS) $(DDSSRCS) $(EXPRSRCS) $(TYPESRCS) \
	$(ERRORSRCS) $(TESTSRCS) $(TESTPROGSRCS) $(UTILSRCS)
	$(MAKE) $(MFLAGS) Makefile

.SUFFIXES:      .o .cc .c

.c.o:
	$(CC) -c $(CFLAGS) $(CPPFLAGS) -o $@ $<

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(CPPFLAGS) -o $@ $<

# DO NOT DELETE; depend requires this line
Connect.o: Connect.cc config_dap.h debug.h DataDDS.h BaseType.h \
 Clause.h expr.h RValue.h DDS.h Connect.h DAS.h AttrTable.h Error.h \
 util.h Byte.h Int16.h UInt16.h Int32.h UInt32.h Float32.h Float64.h \
 Str.h dods-limits.h Url.h Array.h Vector.h List.h Structure.h \
 Sequence.h Grid.h
Connections.o: Connections.cc debug.h Connections.h config_dap.h \
 Connect.h DAS.h AttrTable.h DDS.h BaseType.h Clause.h expr.h RValue.h \
 Error.h util.h Byte.h Int16.h UInt16.h Int32.h UInt32.h Float32.h \
 Float64.h Str.h dods-limits.h Url.h Array.h Vector.h List.h \
 Structure.h Sequence.h Grid.h
cgi_util.o: cgi_util.cc config_dap.h cgi_util.h Connect.h DAS.h \
 AttrTable.h DDS.h BaseType.h Clause.h expr.h RValue.h debug.h Error.h \
 util.h Byte.h Int16.h UInt16.h Int32.h UInt32.h Float32.h Float64.h \
 Str.h dods-limits.h Url.h Array.h Vector.h List.h Structure.h \
 Sequence.h Grid.h
escaping.o: escaping.cc
DODSFilter.o: DODSFilter.cc config_dap.h DAS.h GNU/SLList.h \
 AttrTable.h DDS.h BaseType.h Clause.h expr.h RValue.h debug.h \
 cgi_util.h Connect.h Error.h util.h Byte.h Int16.h UInt16.h Int32.h \
 UInt32.h Float32.h Float64.h Str.h dods-limits.h Url.h Array.h \
 Vector.h List.h Structure.h Sequence.h Grid.h DODSFilter.h
AttrTable.o: AttrTable.cc config_dap.h AttrTable.h debug.h util.h \
 BaseType.h Byte.h Int16.h UInt16.h Int32.h UInt32.h Float32.h \
 Float64.h Str.h dods-limits.h Url.h Array.h Vector.h DDS.h Clause.h \
 expr.h RValue.h List.h Structure.h Sequence.h Grid.h
DAS.o: DAS.cc config_dap.h DAS.h GNU/SLList.h AttrTable.h Error.h \
 parser.h GSEClause.h BaseType.h Array.h dods-limits.h Vector.h DDS.h \
 Clause.h expr.h RValue.h debug.h Grid.h
parser-util.o: parser-util.cc config_dap.h parser.h Error.h \
 GSEClause.h BaseType.h Array.h dods-limits.h Vector.h DDS.h Clause.h \
 expr.h RValue.h debug.h Grid.h
DDS.o: DDS.cc config_dap.h expr.h BaseType.h Clause.h RValue.h \
 Connect.h DAS.h AttrTable.h DDS.h debug.h Error.h util.h Byte.h \
 Int16.h UInt16.h Int32.h UInt32.h Float32.h Float64.h Str.h \
 dods-limits.h Url.h Array.h Vector.h List.h Structure.h Sequence.h \
 Grid.h parser.h GSEClause.h ce_functions.h cgi_util.h
DataDDS.o: DataDDS.cc config_dap.h DataDDS.h BaseType.h Clause.h \
 expr.h RValue.h debug.h DDS.h
Clause.o: Clause.cc expr.h config_dap.h BaseType.h DDS.h Clause.h \
 RValue.h debug.h
RValue.o: RValue.cc config_dap.h BaseType.h expr.h RValue.h DDS.h \
 Clause.h debug.h
BaseType.o: BaseType.cc config_dap.h BaseType.h util.h Byte.h Int16.h \
 UInt16.h Int32.h UInt32.h Float32.h Float64.h Str.h dods-limits.h \
 Url.h Array.h Vector.h DDS.h Clause.h expr.h RValue.h debug.h List.h \
 Structure.h Sequence.h Grid.h
Byte.o: Byte.cc config_dap.h Byte.h BaseType.h Int16.h DDS.h Clause.h \
 expr.h RValue.h debug.h util.h UInt16.h Int32.h UInt32.h Float32.h \
 Float64.h Str.h dods-limits.h Url.h Array.h Vector.h List.h \
 Structure.h Sequence.h Grid.h parser.h Error.h GSEClause.h expr.tab.h \
 Operators.h GNU/Regex.h
Int32.o: Int32.cc config_dap.h Int32.h BaseType.h DDS.h Clause.h \
 expr.h RValue.h debug.h util.h Byte.h Int16.h UInt16.h UInt32.h \
 Float32.h Float64.h Str.h dods-limits.h Url.h Array.h Vector.h List.h \
 Structure.h Sequence.h Grid.h parser.h Error.h GSEClause.h expr.tab.h \
 Operators.h GNU/Regex.h
Float64.o: Float64.cc config_dap.h Float64.h BaseType.h DDS.h Clause.h \
 expr.h RValue.h debug.h util.h Byte.h Int16.h UInt16.h Int32.h \
 UInt32.h Float32.h Str.h dods-limits.h Url.h Array.h Vector.h List.h \
 Structure.h Sequence.h Grid.h parser.h Error.h GSEClause.h expr.tab.h \
 Operators.h GNU/Regex.h
Str.o: Str.cc config_dap.h Str.h dods-limits.h BaseType.h DDS.h \
 Clause.h expr.h RValue.h debug.h parser.h Error.h GSEClause.h Array.h \
 Vector.h Grid.h expr.tab.h Operators.h GNU/Regex.h util.h Byte.h \
 Int16.h UInt16.h Int32.h UInt32.h Float32.h Float64.h Url.h List.h \
 Structure.h Sequence.h
Url.o: Url.cc Url.h dods-limits.h BaseType.h config_dap.h Str.h
Vector.o: Vector.cc config_dap.h Vector.h BaseType.h DDS.h Clause.h \
 expr.h RValue.h debug.h util.h Byte.h Int16.h UInt16.h Int32.h \
 UInt32.h Float32.h Float64.h Str.h dods-limits.h Url.h Array.h List.h \
 Structure.h Sequence.h Grid.h
List.o: List.cc config_dap.h List.h dods-limits.h Vector.h BaseType.h \
 DDS.h Clause.h expr.h RValue.h debug.h Error.h util.h Byte.h Int16.h \
 UInt16.h Int32.h UInt32.h Float32.h Float64.h Str.h Url.h Array.h \
 Structure.h Sequence.h Grid.h parser.h GSEClause.h expr.tab.h
Array.o: Array.cc config_dap.h Array.h dods-limits.h Vector.h \
 BaseType.h DDS.h Clause.h expr.h RValue.h debug.h util.h Byte.h \
 Int16.h UInt16.h Int32.h UInt32.h Float32.h Float64.h Str.h Url.h \
 List.h Structure.h Sequence.h Grid.h
Structure.o: Structure.cc config_dap.h Structure.h BaseType.h DDS.h \
 Clause.h expr.h RValue.h debug.h util.h Byte.h Int16.h UInt16.h \
 Int32.h UInt32.h Float32.h Float64.h Str.h dods-limits.h Url.h \
 Array.h Vector.h List.h Sequence.h Grid.h
Sequence.o: Sequence.cc config_dap.h debug.h Sequence.h BaseType.h \
 DDS.h Clause.h expr.h RValue.h DataDDS.h util.h Byte.h Int16.h \
 UInt16.h Int32.h UInt32.h Float32.h Float64.h Str.h dods-limits.h \
 Url.h Array.h Vector.h List.h Structure.h Grid.h
Grid.o: Grid.cc config_dap.h Grid.h BaseType.h DDS.h Clause.h expr.h \
 RValue.h debug.h Array.h dods-limits.h Vector.h util.h Byte.h Int16.h \
 UInt16.h Int32.h UInt32.h Float32.h Float64.h Str.h Url.h List.h \
 Structure.h Sequence.h
UInt32.o: UInt32.cc config_dap.h UInt32.h BaseType.h DDS.h Clause.h \
 expr.h RValue.h debug.h util.h Byte.h Int16.h UInt16.h Int32.h \
 Float32.h Float64.h Str.h dods-limits.h Url.h Array.h Vector.h List.h \
 Structure.h Sequence.h Grid.h parser.h Error.h GSEClause.h expr.tab.h \
 Operators.h GNU/Regex.h
util.o: util.cc config_dap.h BaseType.h Str.h dods-limits.h Url.h \
 List.h Vector.h DDS.h Clause.h expr.h RValue.h debug.h Sequence.h \
 Error.h parser.h GSEClause.h Array.h Grid.h expr.tab.h util.h Byte.h \
 Int16.h UInt16.h Int32.h UInt32.h Float32.h Float64.h Structure.h
ce_functions.o: ce_functions.cc config_dap.h BaseType.h List.h \
 dods-limits.h Vector.h DDS.h Clause.h expr.h RValue.h debug.h Array.h \
 Sequence.h Grid.h Error.h GSEClause.h parser.h gse.tab.h util.h \
 Byte.h Int16.h UInt16.h Int32.h UInt32.h Float32.h Float64.h Str.h \
 Url.h Structure.h
GSEClause.o: GSEClause.cc config_dap.h Error.h GSEClause.h BaseType.h \
 Array.h dods-limits.h Vector.h DDS.h Clause.h expr.h RValue.h debug.h \
 Grid.h
Int16.o: Int16.cc config_dap.h Int16.h BaseType.h DDS.h Clause.h \
 expr.h RValue.h debug.h util.h Byte.h UInt16.h Int32.h UInt32.h \
 Float32.h Float64.h Str.h dods-limits.h Url.h Array.h Vector.h List.h \
 Structure.h Sequence.h Grid.h parser.h Error.h GSEClause.h expr.tab.h \
 Operators.h GNU/Regex.h
UInt16.o: UInt16.cc config_dap.h UInt16.h BaseType.h DDS.h Clause.h \
 expr.h RValue.h debug.h util.h Byte.h Int16.h Int32.h UInt32.h \
 Float32.h Float64.h Str.h dods-limits.h Url.h Array.h Vector.h List.h \
 Structure.h Sequence.h Grid.h parser.h Error.h GSEClause.h expr.tab.h \
 Operators.h GNU/Regex.h
Float32.o: Float32.cc config_dap.h Float32.h BaseType.h DDS.h Clause.h \
 expr.h RValue.h debug.h util.h Byte.h Int16.h UInt16.h Int32.h \
 UInt32.h Float64.h Str.h dods-limits.h Url.h Array.h Vector.h List.h \
 Structure.h Sequence.h Grid.h parser.h Error.h GSEClause.h expr.tab.h \
 Operators.h GNU/Regex.h
Error.o: Error.cc config_dap.h Error.h parser.h GSEClause.h BaseType.h \
 Array.h dods-limits.h Vector.h DDS.h Clause.h expr.h RValue.h debug.h \
 Grid.h
InternalErr.o: InternalErr.cc config_dap.h InternalErr.h Error.h
TestByte.o: TestByte.cc TestByte.h Byte.h BaseType.h config_dap.h
TestInt32.o: TestInt32.cc TestInt32.h Int32.h BaseType.h config_dap.h
TestFloat64.o: TestFloat64.cc TestFloat64.h Float64.h BaseType.h \
 config_dap.h
TestStr.o: TestStr.cc TestStr.h dods-limits.h Str.h BaseType.h \
 config_dap.h
TestUrl.o: TestUrl.cc TestUrl.h Url.h dods-limits.h BaseType.h \
 config_dap.h Str.h
TestArray.o: TestArray.cc config_dap.h TestArray.h Array.h \
 dods-limits.h Vector.h BaseType.h DDS.h Clause.h expr.h RValue.h \
 debug.h
TestStructure.o: TestStructure.cc TestStructure.h Structure.h \
 BaseType.h config_dap.h DDS.h Clause.h expr.h RValue.h debug.h
TestList.o: TestList.cc config_dap.h TestList.h List.h dods-limits.h \
 Vector.h BaseType.h DDS.h Clause.h expr.h RValue.h debug.h
TestSequence.o: TestSequence.cc TestSequence.h Sequence.h BaseType.h \
 config_dap.h debug.h
TestGrid.o: TestGrid.cc TestGrid.h Grid.h BaseType.h config_dap.h
TestUInt32.o: TestUInt32.cc TestUInt32.h UInt32.h BaseType.h \
 config_dap.h
TestInt16.o: TestInt16.cc TestInt16.h Int16.h BaseType.h config_dap.h
TestUInt16.o: TestUInt16.cc TestUInt16.h UInt16.h BaseType.h \
 config_dap.h
TestFloat32.o: TestFloat32.cc TestFloat32.h Float32.h BaseType.h \
 config_dap.h
das-test.o: das-test.cc config_dap.h DAS.h GNU/SLList.h AttrTable.h \
 das.tab.h
dds-test.o: dds-test.cc config_dap.h dds.tab.h BaseType.h Int32.h \
 DDS.h Clause.h expr.h RValue.h debug.h util.h Byte.h Int16.h UInt16.h \
 UInt32.h Float32.h Float64.h Str.h dods-limits.h Url.h Array.h \
 Vector.h List.h Structure.h Sequence.h Grid.h
expr-test.o: expr-test.cc config_dap.h DDS.h BaseType.h Clause.h \
 expr.h RValue.h debug.h DataDDS.h parser.h Error.h GSEClause.h \
 Array.h dods-limits.h Vector.h Grid.h expr.tab.h util.h Byte.h \
 Int16.h UInt16.h Int32.h UInt32.h Float32.h Float64.h Str.h Url.h \
 List.h Structure.h Sequence.h
error-test.o: error-test.cc config_dap.h Error.h parser.h GSEClause.h \
 BaseType.h Array.h dods-limits.h Vector.h DDS.h Clause.h expr.h \
 RValue.h debug.h Grid.h Error.tab.h
geturl.o: geturl.cc config_dap.h Connect.h DAS.h AttrTable.h DDS.h \
 BaseType.h Clause.h expr.h RValue.h debug.h Error.h util.h Byte.h \
 Int16.h UInt16.h Int32.h UInt32.h Float32.h Float64.h Str.h \
 dods-limits.h Url.h Array.h Vector.h List.h Structure.h Sequence.h \
 Grid.h
