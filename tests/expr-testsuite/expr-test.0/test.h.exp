
# expect/tcl code to test the expression parser and scanner
# jhrg
#

global comp_output		# contains output from das-test_start
global verbose			# this and srcdir are set by runtest.exp
global srcdir

# The variable `test_file' is the name of the das input file for this test.

set test_name test.h
set test_file test.5

# The variable test_equation is the equation to test.

set test_equation {g\[0:2:4\]\[0\]\[0\]}

# The variable `test_out' is a string that contains the text that should be
# stored in comp_output by das-test_start. The two strings should match
# exactly.

set test_out "The complete DDS:
Dataset {
    Int32 i\\\[20\\\];
    Int32 j;
    String s;
    Grid {
      Array:
        Float64 val\\\[length = 5\\\]\\\[width = 6\\\]\\\[height = 7\\\];
      Maps:
        Float64 length\\\[5\\\];
        Float64 width\\\[6\\\];
        Float64 height\\\[7\\\];
    } g;
} test1;
The data:
Grid {
  Array:
    Float64 val\\\[length = 3\\\]\\\[width = 1\\\]\\\[height = 1\\\];
  Maps:
    Float64 length\\\[3\\\];
    Float64 width\\\[1\\\];
    Float64 height\\\[1\\\];
} g = {  Array: {{{99.999}},{{99.999}},{{99.999}}}  Maps: {99.999, 99.999, 99.999}, {99.999}, {99.999} };"

expr-test_start p ${srcdir}/${test_file} ${test_equation}

if [string match $test_out $comp_output] { # check comp_output
    pass "$test_name"
} else {
    fail "$test_name"
}

expr-test_start P ${srcdir}/${test_file} ${test_equation}

if [string match $test_out $comp_output] { # check comp_output
    pass "$test_name"
} else {
    fail "$test_name"
}
