# Process with autom4te to create an -*- Autotest -*- test suite.

AT_INIT([dmr-test])

AT_ARG_OPTION_ARG([generate-parse],
    [--generate-parse=arg   Build the baseline file for parser test 'arg'],
    [echo "./dmr-test -x -p $at_arg_generate_parse > $at_arg_generate_parse.baseline 2>&1";
     ./dmr-test -x -p $at_arg_generate_parse > $at_arg_generate_parse.baseline 2>&1;
     echo "Built baseline for $at_arg_generate_parse";
     exit],[])

AT_ARG_OPTION_ARG([generate-send],
    [--generate-send=arg   Build the baseline file for sender test 'arg'. 
                           This depends on the 'name' attribute in the xml matching the filename root],
    [echo "./dmr-test -x -s $at_arg_generate_send > $at_arg_generate_send.send_base 2>&1";
     ./dmr-test -x -s $at_arg_generate_send > $at_arg_generate_send.send_base 2>&1;
     root_name=`basename $at_arg_generate_send .xml`;
     cp ${root_name}_data.bin dmr-testsuite/;
     echo "Built baseline for $at_arg_generate_send";
     exit],[])

AT_ARG_OPTION_ARG([generate-trans],
    [--generate-trans=arg  Build the baseline file for round trip transmission test 'arg'],
    [echo "./dmr-test -x -t $at_arg_generate_trans > $at_arg_generate_trans.trans_base 2>&1";
     ./dmr-test -x -t $at_arg_generate_trans > $at_arg_generate_trans.trans_base 2>&1;
     echo "Built baseline for $at_arg_generate_trans";
     exit],[])

AT_ARG_OPTION_ARG([generate-trans-ce],
    [--generate-trans-ce=dataset,ce,ext  Build the baseline (ext) file for round trip transmission test 'arg' with 'ce'],
    [data=`echo $at_arg_generate_trans_ce | sed 's@\(.*\),\(.*\),\(.*\)@\1@g'`
     ce=`echo $at_arg_generate_trans_ce | sed 's@\(.*\),\(.*\),\(.*\)@\2@g'`
     code=`echo $at_arg_generate_trans_ce | sed 's@\(.*\),\(.*\),\(.*\)@\3@g'`
     echo "./dmr-test -x -t $data -c $ce > $data.$code.trans_base 2>&1";
     ./dmr-test -x -t $data -c "$ce" > $data.$code.trans_base 2>&1;
     echo "Built baseline for $at_arg_generate_trans_ce";
     exit],[])

# Usage DMR_PARSE $1 <test_input> $2 <pass/xfail>
# The baseline is assumed to be $1.baseline
m4_define([DMR_PARSE], [

    AT_SETUP([parse $1])
    AT_KEYWORDS([parse])
    
    input=$abs_srcdir/$1
    baseline=$input.baseline
    
    AT_CHECK([$abs_builddir/dmr-test -x -p $input || true], [], [stdout], [stderr])
    AT_CHECK([diff -b -B $baseline stdout || diff -b -B $baseline stderr], [], [ignore],[],[])
    AT_XFAIL_IF([test "$2" = "xfail"])
    
    AT_CLEANUP
])

# NB: This is a good idea, but the test doesn't work because dmr-test is actually run
# in some odd directory so the 'response file' is not written in the dir where the test
# is run. cmp will return an error indicating file not found. The 'trans' tests check
# that the values are being sent correctly. jhrg 10/9/13

# Usage DMR_SEND $1 <test_input> $2 <pass/xfail>
# This code tests the parser output and does a binary compare on the 'reponse document'
# built by the 'sender'.
m4_define([DMR_SEND], [
    # Test sending data (i.e., writing the Data DMR to a file)
    AT_SETUP([send $1])
    AT_KEYWORDS([send])
    
    input=$abs_srcdir/$1
    baseline=$input.send_base

    AT_CHECK([$abs_builddir/dmr-test -x -s $input || true], [], [stdout], [stderr])
    AT_CHECK([diff -b -B $baseline stdout || diff -b -B $baseline stderr], [], [ignore],[],[])

    binary="`basename $input .xml`_data.bin"
    # Skip in 250 charactes to get past the MIME headers that include variable text
    # like the current date/time.
    AT_CHECK([cmp $abs_srcdir/$binary $abs_srcdir/dmr-testsuite/$binary 250 250])
    
    AT_XFAIL_IF([test "$2" = "xfail"])
    AT_CLEANUP
])

# Usage DMR_TRANS $1 <test_input> $2 <pass/xfail>
# This code tests the values printed when the received document is decoded.
m4_define([DMR_TRANS], [
    # Test transmitting data (i.e., writing the Data DMR to a file and then decoding it)
    AT_SETUP([trans/receive $1])
    AT_KEYWORDS([trans])
    
    input=$abs_srcdir/$1
    baseline=$input.trans_base

    AT_CHECK([$abs_builddir/dmr-test -x -t $input || true], [], [stdout], [stderr])
    AT_CHECK([diff -b -B $baseline stdout || diff -b -B $baseline stderr], [], [ignore],[],[])
    
    AT_XFAIL_IF([test "$2" = "xfail"])
    AT_CLEANUP
])

# Usage DMR_TRANS_CE <test_input> <ce> <baseline> <pass/xfail>
# This code tests the values printed when the received document is decoded.
m4_define([DMR_TRANS_CE], [
    # Test transmitting data (i.e., writing the Data DMR to a file and then decoding it)
    AT_SETUP([trans/receive $1 $2])
    AT_KEYWORDS([trans])
    
    input=$abs_srcdir/$1
    baseline=$abs_srcdir/$3
    
    echo "baseline: $baseline"

    AT_CHECK([$abs_builddir/dmr-test -x -t $input -c "$2" || true], [], [stdout], [stderr])
    AT_CHECK([diff -b -B $baseline stdout || diff -b -B $baseline stderr], [], [ignore],[],[])
    
    AT_XFAIL_IF([test "X$4" = "Xxfail"])
    AT_CLEANUP
])

# Usage DMR_INTERN $1 <test_input> $2 <pass/xfail>
# This code tests the values printed when the received document is decoded.
m4_define([DMR_INTERN], [
    # Test reading/interning data (i.e., using the read() methods to load up objects with
    # values without running them through serialize/deserialize)
    AT_SETUP([intern data $1])
    AT_KEYWORDS([intern])
    
    input=$abs_srcdir/$1
    baseline=$input.trans_base

    AT_CHECK([$abs_builddir/dmr-test -x -i $input || true], [], [stdout], [stderr])
    AT_CHECK([diff -b -B $baseline stdout || diff -b -B $baseline stderr], [], [ignore],[],[])
    
    AT_XFAIL_IF([test "$2" = "xfail"])
    AT_CLEANUP
])

DMR_PARSE([dmr-testsuite/test_simple_1.xml], [pass])
DMR_PARSE([dmr-testsuite/test_simple_2.xml], [pass])
DMR_PARSE([dmr-testsuite/test_simple_3.xml], [pass])

DMR_PARSE([dmr-testsuite/test_simple_3_error_1.xml], [pass])
DMR_PARSE([dmr-testsuite/test_simple_3_error_2.xml], [pass])
DMR_PARSE([dmr-testsuite/test_simple_3_error_3.xml], [pass])

DMR_PARSE([dmr-testsuite/test_simple_4.xml], [pass])
DMR_PARSE([dmr-testsuite/test_simple_5.xml], [pass])
DMR_PARSE([dmr-testsuite/test_simple_6.xml], [pass])
DMR_PARSE([dmr-testsuite/test_simple_7.xml], [pass])
DMR_PARSE([dmr-testsuite/test_simple_8.xml], [pass])
DMR_PARSE([dmr-testsuite/test_simple_9.xml], [pass])
DMR_PARSE([dmr-testsuite/test_simple_9.1.xml], [pass])
DMR_PARSE([dmr-testsuite/test_simple_10.xml], [pass])

DMR_PARSE([dmr-testsuite/test_array_1.xml], [pass])
DMR_PARSE([dmr-testsuite/test_array_2.xml], [pass])
DMR_PARSE([dmr-testsuite/test_array_3.xml], [pass])
DMR_PARSE([dmr-testsuite/test_array_4.xml], [pass])
DMR_PARSE([dmr-testsuite/test_array_5.xml], [pass])
DMR_PARSE([dmr-testsuite/test_array_6.xml], [pass])
DMR_PARSE([dmr-testsuite/test_array_7.xml], [pass])
DMR_PARSE([dmr-testsuite/test_array_8.xml], [pass])
DMR_PARSE([dmr-testsuite/test_array_10.xml], [pass])
DMR_PARSE([dmr-testsuite/test_array_11.xml], [pass])

# Transmit: Test building and then decoding the response

DMR_TRANS([dmr-testsuite/test_simple_1.xml], [pass])
DMR_TRANS([dmr-testsuite/test_simple_2.xml], [pass])
DMR_TRANS([dmr-testsuite/test_simple_3.xml], [pass])
DMR_TRANS([dmr-testsuite/test_simple_4.xml], [pass])
DMR_TRANS([dmr-testsuite/test_simple_5.xml], [pass])
DMR_TRANS([dmr-testsuite/test_simple_6.xml], [pass])
DMR_TRANS([dmr-testsuite/test_simple_7.xml], [pass])
DMR_TRANS([dmr-testsuite/test_simple_8.xml], [pass])
DMR_TRANS([dmr-testsuite/test_simple_9.xml], [pass])
DMR_TRANS([dmr-testsuite/test_simple_9.1.xml], [pass])
DMR_TRANS([dmr-testsuite/test_simple_10.xml], [pass])

DMR_TRANS([dmr-testsuite/test_array_1.xml], [pass])
DMR_TRANS([dmr-testsuite/test_array_2.xml], [pass])
DMR_TRANS([dmr-testsuite/test_array_3.xml], [pass])
DMR_TRANS([dmr-testsuite/test_array_4.xml], [pass])
DMR_TRANS([dmr-testsuite/test_array_5.xml], [pass])
DMR_TRANS([dmr-testsuite/test_array_6.xml], [pass])
DMR_TRANS([dmr-testsuite/test_array_7.xml], [pass])
DMR_TRANS([dmr-testsuite/test_array_8.xml], [pass])
DMR_TRANS([dmr-testsuite/test_array_10.xml], [pass])
DMR_TRANS([dmr-testsuite/test_array_11.xml], [pass])

DMR_TRANS_CE([dmr-testsuite/test_array_4.xml], [a], [dmr-testsuite/test_array_4.xml.1.trans_base], [pass])
DMR_TRANS_CE([dmr-testsuite/test_array_4.xml], [a[[]][[]] ], [dmr-testsuite/test_array_4.xml.2.trans_base], [pass])

DMR_TRANS_CE([dmr-testsuite/test_array_4.xml], [/row=[[0:1]];/col=[[3]];a], 
    [dmr-testsuite/test_array_4.xml.3.trans_base], [pass])
    
DMR_TRANS_CE([dmr-testsuite/test_array_4.xml], [/row=[[0:1]];/col=[[3]];a[[]][[]] ], 
    [dmr-testsuite/test_array_4.xml.4.trans_base], [pass])
    
DMR_TRANS_CE([dmr-testsuite/test_array_4.xml], [/row=[[0:1]];/col=[[3]];a[[]][[]];b[[0]][[]];c[[0:]][[0:]] ], 
    [dmr-testsuite/test_array_4.xml.5.trans_base], [pass])
    
DMR_TRANS_CE([dmr-testsuite/test_array_4.xml], [x[[]][[]] ], [dmr-testsuite/test_array_4.xml.6.trans_base], [pass])
DMR_TRANS_CE([dmr-testsuite/test_array_4.xml], [/row=[[0:1]];x[[]][[]] ], [dmr-testsuite/test_array_4.xml.7.trans_base], [pass])

DMR_TRANS_CE([dmr-testsuite/test_array_4.xml], [c[[2:]][[2:]] ], [dmr-testsuite/test_array_4.xml.8.trans_base], [pass])
    
DMR_TRANS_CE([dmr-testsuite/test_simple_6.xml], [s], [dmr-testsuite/test_simple_6.xml.1.trans_base], [pass])
DMR_TRANS_CE([dmr-testsuite/test_simple_6.xml], [s.i1], [dmr-testsuite/test_simple_6.xml.2.trans_base], [pass])
DMR_TRANS_CE([dmr-testsuite/test_simple_6.xml], [s.s], [dmr-testsuite/test_simple_6.xml.3.trans_base], [pass])
DMR_TRANS_CE([dmr-testsuite/test_simple_6.1.xml], [s.inner.i2], [dmr-testsuite/test_simple_6.1.xml.1.trans_base], [pass])

DMR_TRANS_CE([dmr-testsuite/test_simple_6.xml], [s{i1}], [dmr-testsuite/test_simple_6.xml.2.trans_base], [pass])
DMR_TRANS_CE([dmr-testsuite/test_simple_6.xml], [s{s}], [dmr-testsuite/test_simple_6.xml.3.trans_base], [pass])
DMR_TRANS_CE([dmr-testsuite/test_simple_6.1.xml], [s{inner.i2}], [dmr-testsuite/test_simple_6.1.xml.1.trans_base], [pass])
DMR_TRANS_CE([dmr-testsuite/test_simple_6.1.xml], [s{inner{i2}}], [dmr-testsuite/test_simple_6.1.xml.1.trans_base], [pass])

DMR_TRANS_CE([dmr-testsuite/test_array_6.xml], [a], [dmr-testsuite/test_array_6.xml.1.trans_base], [pass])
DMR_TRANS_CE([dmr-testsuite/test_array_6.xml], [a[[]][[]] ], [dmr-testsuite/test_array_6.xml.1.trans_base], [pass])
DMR_TRANS_CE([dmr-testsuite/test_array_6.xml], [/row=[[0:1]];a[[]][[]] ], [dmr-testsuite/test_array_6.xml.2.trans_base], [pass])
DMR_TRANS_CE([dmr-testsuite/test_array_6.xml], [/row=[[0:1]];a[[]][[1:2]] ], [dmr-testsuite/test_array_6.xml.3.trans_base], [pass])

DMR_INTERN([dmr-testsuite/test_simple_1.xml], [pass])
DMR_INTERN([dmr-testsuite/test_simple_2.xml], [pass])
DMR_INTERN([dmr-testsuite/test_simple_3.xml], [pass])
DMR_INTERN([dmr-testsuite/test_simple_4.xml], [pass])
DMR_INTERN([dmr-testsuite/test_simple_5.xml], [pass])
DMR_INTERN([dmr-testsuite/test_simple_6.xml], [pass])
DMR_INTERN([dmr-testsuite/test_simple_7.xml], [pass])
DMR_INTERN([dmr-testsuite/test_simple_8.xml], [pass])
DMR_INTERN([dmr-testsuite/test_simple_9.xml], [pass])
DMR_INTERN([dmr-testsuite/test_simple_9.1.xml], [pass])
DMR_INTERN([dmr-testsuite/test_simple_10.xml], [pass])

DMR_INTERN([dmr-testsuite/test_array_1.xml], [pass])
DMR_INTERN([dmr-testsuite/test_array_2.xml], [pass])
DMR_INTERN([dmr-testsuite/test_array_3.xml], [pass])
DMR_INTERN([dmr-testsuite/test_array_4.xml], [pass])
DMR_INTERN([dmr-testsuite/test_array_5.xml], [pass])
DMR_INTERN([dmr-testsuite/test_array_6.xml], [pass])
DMR_INTERN([dmr-testsuite/test_array_7.xml], [pass])
DMR_INTERN([dmr-testsuite/test_array_8.xml], [pass])
DMR_INTERN([dmr-testsuite/test_array_10.xml], [pass])
DMR_INTERN([dmr-testsuite/test_array_11.xml], [pass])



