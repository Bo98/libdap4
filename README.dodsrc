$Id: README.dodsrc,v 1.3 2003/01/10 19:46:40 jimg Exp $

The DODS client-side configuration file (.dodsrc) is used to configure how
clients cache responses and how they interact with proxy servers. By default
the configuration file resides in a users home directory and is called
`.dodsrc'. This can be changed by creating the environment variable
DODS_CACHE_INIT and setting it to the full pathname of the configuration
file.

If a DODS client starts and cannot find the configuration file, then one with
default parameters will be created in the user's home directory. By default
caching will be enabled with a maximum cache size of 20M and a default
expiration time of 24 hours. By default no proxy server is configured.

A sample configuration file looks like (the line numbers are not part of the
file; they've been added to make the description clearer):

0       # Comments start with a `#' in the first column.
1	USE_CACHE=1
2	MAX_CACHE_SIZE=20
3	MAX_CACHED_OBJ=5
4	IGNORE_EXPIRES=0
5	CACHE_ROOT=/home/jimg/.dods_cache/
6	DEFAULT_EXPIRES=86400
7	PROXY_SERVER=http,http://dcz.dods.org/
8	PROXY_FOR=http://dax.po.gso.uri.edu/.*,http://dods.gso.uri.edu/
9	NO_PROXY_FOR=http,dcz.dods.org
    
COMMENTS 
Starting a line with a `#' makes that line a comment. 

CACHING 

The parameters on lines 1 through 6 determine how the DAP++ library will use
its HTTP 1.1 cache. If the value of USE_CACHE is 1, the cache is active. A
value of 0 turns off the cache. Make sure you use zero (0) and not the letter
`O'.

The value of MAX_CACHE_SIZE sets the maximum size of the cache in megabytes.
Once the cache reaches this size, caching more objects will cause cache
garbage collection. The algorithm used is to first purge the cache of any
stale entries and then remove remaining entries starting with those that have
the lowest hit count. Garbage collection stops when 90% of the cache has been
purged.

The value of MAX_CACHED_OBJ sets the maximum size of any individual object in
the cache in megabytes. Objects received from a server larger than this value
will not be cached even if there's room for them without purging other
objects.

The parameter CACHE_ROOT contains the pathname to the cache's top directory.
If two or more users want to share a cache, then they must both have read and
write permissions to the cache root.

If the value of IGNORE_EXPIRES is 1, then Expires: headers in response
documents will be ignored. The value of DEFAULT_EXPIRES sets the expiration
time for any response that does not include eitehr an Expires or
Last-Modified header. The value is given in seconds; 86,400 is 24 hours. In
general you should *not* ignore the Expires header; the server probably had a
good reason to send it along with the response. This parameter is here for
unusual situations.

Note: If a Last-Modified header is returned with the response, and there's
*no* Expires header, the expiration time is is 10% of the difference between
the current time and the LM time or 48 hours, whichever is smaller. Note that
libwww ignores the DEFAULT_EXPIRES time in this case. Any request made before
the expiration time will use the cached response without validation. Any
request made after the expiration time will use a conditional GET. Servers
that have been upgraded to 3.2 or greater will return a 304 response if the
cached response is still valid or a new response if it is not valid.

If the value of ALWAYS_VALIDATE is 1, then all accesses will be validated with
the origin server. A value of 0 causes libwww to use the more complex
exipration and validate algorithm.

PROXY SERVERS

Note that the parameters PROXY_SERVER, NO_PROXY and PROXY_FOR may be repeated
to add multiple proxy servers, suppress proxy access for several hosts, etc.

Lines 7, 8 and 9 contain the parameters used to configure a proxy server.
The parameter PROXY_SERVER configures a default proxy server. The format is

    PROXY_SERVER=<protocol>,<proxy host url>

Currently the only supported protocol is `http'.
<proxy host url> must be a full URL to the host running the proxy server.

The PROXY_FOR parameter provides a way to specify that URLs which match a
regular expression should be accessed using a particular proxy server. The
syntax for PROXY_FOR is:

     PROXY_FOR=<regular expression>,<proxy host url>[,<flags>]

Where:
<regular expression> is an expression which matches the URL or group of
URLs. For example `http://dax.po.gso.uri.edu/.*\.hdf' would match a URL
ending in `.hdf' at dax.po.gso.uri.edu. The regular expression uses the POSIX
basic syntax. 
<proxy host url> is the same as above.
<flags> is an optional integer that configures the regular expression
matcher. A value of zero sets the default. The four flag values and there
meanings are:

     If REG_EXTENDED is set, use POSIX extended syntax; otherwise,
     use POSIX basic syntax. To set this, add 1 to the value of <flags>.

     If REG_NEWLINE is set, then . and [^...] don't match newline.
     Also, regexec will try a match beginning after every newline. Set this
     by adding 2 to <flags>.

     If REG_ICASE is set, then consider upper- and lowercase
     versions of letters to be equivalent when matching. Add 4 to <flags>.

     If REG_NOSUB is set, then when PREG is passed to regexec, that
     routine will report only success or failure, and nothing about the
     registers. Add 8 to <flags>.

The NO_PROXY parameter provides a simple way to say that access to a certain
host should never go through a proxy without using the more complicated
regular expression syntax. The syntax of NO_PROXY is:

    NO_PROXY=<protocol>,<hostname>

where <protocol> is as for PROXY_SERVER
<hostname> is the name of the host, not a url.

