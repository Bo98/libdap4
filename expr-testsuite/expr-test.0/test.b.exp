
# expect/tcl code to test the expression parser and scanner
# jhrg
#
# $Log: test.b.exp,v $
# Revision 1.3  2000/06/16 18:15:02  jimg
# Merged with 3.1.7
#
# Revision 1.2.28.1  2000/06/15 02:24:58  jimg
# Fixed the tests: problems with PATH, etc. broke the tests on my new machine
#
# Revision 1.2  1998/03/27 04:28:49  jimg
# Fixed tests for the new DDS::send() mime header stuff
#
# Revision 1.1  1997/06/05 22:53:30  jimg
# *** empty log message ***
#

global comp_output		# contains output from das-test_start
global verbose			# this and srcdir are set by runtest.exp
global srcdir

# The variable `test_file' is the name of the das input file for this test.

set test_name test.b
set test_file test.2

# The variable test_equation is the equation to test.

set test_equation s2

# The variable `test_out' is a string that contains the text that should be
# stored in comp_output by das-test_start. The two strings should match
# exactly.

set test_out "The complete DDS:
Dataset {
    Structure {
        Int32 j;
        Int32 k;
    } s1;
    Structure {
        Int32 l;
        Int32 m;
    } s2\\\[10\\\];
    Structure {
        Int32 n;
        Int32 o;
    } s3;
} test2;
The data:
Structure {
    Int32 l;
    Int32 m;
} s2\\\[10\\\] = {{ 123456789, 123456789 }, { 123456789, 123456789 }, { 123456789, 123456789 }, { 123456789, 123456789 }, { 123456789, 123456789 }, { 123456789, 123456789 }, { 123456789, 123456789 }, { 123456789, 123456789 }, { 123456789, 123456789 }, { 123456789, 123456789 }};"

expr-test_start p ${srcdir}/${test_file} ${test_equation}

if [string match $test_out $comp_output] { # check comp_output
    pass "$test_name"
} else {
    fail "$test_name"
}


